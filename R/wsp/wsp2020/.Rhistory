Poly_Code as HUC8_Code
FROM data_sp_cont
',sep="")
data_huc8 <- sqldf(data_huc8)
###########################################################################
###########################################################################
data_huc10 <- paste('SELECT Facility_hydroid,
Poly_Name as HUC10_Name,
Poly_Code as HUC10_Code
FROM data_sp_cont
',sep="")
data_huc10 <- sqldf(data_huc10)
# this first query was using data raw
data_query <- paste("SELECT *
FROM data_sp_raw AS a
LEFT OUTER JOIN data_huc6 AS b
ON (a.Facility_hydroid = b.Facility_hydroid)")
data_HUCs <- sqldf(data_query)
add_huc8 <- paste("SELECT *
FROM data_HUCs AS a
LEFT OUTER JOIN data_huc8 AS b
ON (a.Facility_hydroid = b.Facility_hydroid)")
data_HUCs <- sqldf(add_huc8)
add_huc10 <- paste("SELECT *
FROM data_HUCs AS a
LEFT OUTER JOIN data_huc10 AS b
ON (a.Facility_hydroid = b.Facility_hydroid)")
data_HUCs <- sqldf(add_huc10)
View(data_HUCs)
write.csv(data_HUCs, paste(folder,"wsp2020.fac.all.HUC.csv",sep=""))
library("readxl")
library("kableExtra")
library("sqldf")
folder <- "U:/OWS/foundation_datasets/wsp/wsp2020/"
data_huc_raw <- read.csv(paste(folder,"wsp2020.fac.all.HUC.csv",sep=""))
View(data_huc_raw)
HUC6.sql <- paste('SELECT HUC6_Name,
HUC6_Code,
COUNT(Facility_hydroid),
sum(fac_2020_mgy),
sum(fac_2040_mgy)
FROM data_huc_raw
GROUP BY HUC6_Code
',sep="")
HUC6_summary <- sqldf(HUC6.sql)
View(HUC6_summary)
library("readxl")
library("kableExtra")
library("sqldf")
# Location of source data
source <- "wsp2020.fac.all.csv"
#source <- "wsp2020.mp.all.csv"
folder <- "U:/OWS/foundation_datasets/wsp/wsp2020/"
# Location of GIS_functions and gdb
localpath <-"C:/Users/nrf46657/Desktop/VAHydro Development/GitHub/"
source(paste(localpath,'hydro-tools/GIS_LAYERS','GIS_functions.R',sep='/'));
###gdb_path <- "hydro-tools/GIS_LAYERS/HUC.gdb" #Location of HUC .gdb
###layer_name <- 'WBDHU6' #HUC6 layer withing the HUC .gdb
gdb_path <- "hydro-tools/GIS_LAYERS/WBD.gdb"
layer_name <- 'WBDHU10'
fips_centroids <- read.csv(paste("https://deq1.bse.vt.edu/d.dh/usafips_centroid_export",sep=""))
data_raw <- read.csv(paste(folder,source,sep=""))
data_sp <- data_raw
###########################################################################
# # PERFORM SPATIAL CONTAINMENT
# data_sp <- data_sp[-which(data_sp$Latitude > 90),]
#
# #PERFORM THIS PART IN SQL AS WELL:
# #Set NA, -99, or 99 coordinates to 0.0; This step is required for coordinates() function
# data_sp$Latitude[is.na(data_sp$Latitude)] = 0.0 #-9999
# data_sp$Longitude[is.na(data_sp$Longitude)] = 0.0
# data_sp$Latitude[data_sp$Latitude == 99] = 0.0
# data_sp$Latitude[data_sp$Latitude == -99] = 0.0
# data_sp$Longitude[data_sp$Longitude == 99] = 0.0
# data_sp$Longitude[data_sp$Longitude == -99] = 0.0
###########################################################################
###########################################################################
#data_sp[is.na(data_sp$Latitude)]
#which(is.na(data_sp$Latitude))
#which(fips_centroids$fips_code == 51001)
#data_sp[which(is.na(data_sp$Latitude)),]
fips_join <- paste("SELECT *
FROM data_sp AS a
LEFT OUTER JOIN fips_centroids AS b
ON (a.fips_code = b.fips_code)")
fips_join.df <- sqldf(fips_join)
fips_join.df$forced_geom <- ''
#Do all of this in SQL? or simplify with ORs, ANDs
#NA lat
fips_join.df[which(is.na(fips_join.df$Latitude)),]$forced_geom = 'fips_centroid'
fips_join.df[which(is.na(fips_join.df$Latitude)),]$Latitude = fips_join.df[which(is.na(fips_join.df$Latitude)),]$fips_latitude
#NA Long
fips_join.df[which(is.na(fips_join.df$Longitude)),]$forced_geom = 'fips_centroid'
fips_join.df[which(is.na(fips_join.df$Longitude)),]$Longitude = fips_join.df[which(is.na(fips_join.df$Longitude)),]$fips_longitude
#99 lat
fips_join.df[which(fips_join.df$Latitude == 99),]$forced_geom = 'fips_centroid'
fips_join.df[which(fips_join.df$Latitude == 99),]$Latitude = fips_join.df[which(fips_join.df$Latitude == 99),]$fips_latitude
#99 long
fips_join.df[which(fips_join.df$Longitude == 99),]$forced_geom = 'fips_centroid'
fips_join.df[which(fips_join.df$Longitude == 99),]$Longitude = fips_join.df[which(fips_join.df$Longitude == 99),]$fips_longitude
#-99 lat
fips_join.df[which(fips_join.df$Latitude == -99),]$forced_geom = 'fips_centroid'
fips_join.df[which(fips_join.df$Latitude == -99),]$Latitude = fips_join.df[which(fips_join.df$Latitude == -99),]$fips_latitude
#-99 long
fips_join.df[which(fips_join.df$Longitude == -99),]$forced_geom = 'fips_centroid'
fips_join.df[which(fips_join.df$Longitude == -99),]$Longitude = fips_join.df[which(fips_join.df$Longitude == -99),]$fips_longitude
#>90 lat
fips_join.df[which(fips_join.df$Latitude > 90),]$forced_geom = 'fips_centroid'
fips_join.df[which(fips_join.df$Latitude > 90),]$Latitude = fips_join.df[which(fips_join.df$Latitude > 90),]$fips_latitude
data_sp <- fips_join.df
data_sp_raw <- fips_join.df
################################################################
coordinates(data_sp) <- c("Longitude", "Latitude") #sp_contain() requires a coordinates column
data_sp_cont <- sp_contain(paste(localpath,gdb_path,sep=""),layer_name,data_sp)
data_sp_cont <- data.frame(data_sp_cont)
data_huc6 <- paste('SELECT Facility_hydroid,
Poly_Name as HUC6_Name,
Poly_Code as HUC6_Code
FROM data_sp_cont
',sep="")
data_huc6 <- sqldf(data_huc6)
data_huc6
library("readxl")
library("kableExtra")
library("sqldf")
# Location of source data
source <- "wsp2020.fac.all.csv"
#source <- "wsp2020.mp.all.csv"
folder <- "U:/OWS/foundation_datasets/wsp/wsp2020/"
# Location of GIS_functions and gdb
localpath <-"C:/Users/nrf46657/Desktop/VAHydro Development/GitHub/"
source(paste(localpath,'hydro-tools/GIS_LAYERS','GIS_functions.R',sep='/'));
###gdb_path <- "hydro-tools/GIS_LAYERS/HUC.gdb" #Location of HUC .gdb
###layer_name <- 'WBDHU6' #HUC6 layer withing the HUC .gdb
gdb_path <- "hydro-tools/GIS_LAYERS/WBD.gdb"
layer_name <- 'WBDHU6'
fips_centroids <- read.csv(paste("https://deq1.bse.vt.edu/d.dh/usafips_centroid_export",sep=""))
data_raw <- read.csv(paste(folder,source,sep=""))
data_sp <- data_raw
fips_join <- paste("SELECT *
FROM data_sp AS a
LEFT OUTER JOIN fips_centroids AS b
ON (a.fips_code = b.fips_code)")
fips_join.df <- sqldf(fips_join)
fips_join.df$forced_geom <- ''
#Do all of this in SQL? or simplify with ORs, ANDs
#NA lat
fips_join.df[which(is.na(fips_join.df$Latitude)),]$forced_geom = 'fips_centroid'
fips_join.df[which(is.na(fips_join.df$Latitude)),]$Latitude = fips_join.df[which(is.na(fips_join.df$Latitude)),]$fips_latitude
#NA Long
fips_join.df[which(is.na(fips_join.df$Longitude)),]$forced_geom = 'fips_centroid'
fips_join.df[which(is.na(fips_join.df$Longitude)),]$Longitude = fips_join.df[which(is.na(fips_join.df$Longitude)),]$fips_longitude
#99 lat
fips_join.df[which(fips_join.df$Latitude == 99),]$forced_geom = 'fips_centroid'
fips_join.df[which(fips_join.df$Latitude == 99),]$Latitude = fips_join.df[which(fips_join.df$Latitude == 99),]$fips_latitude
#99 long
fips_join.df[which(fips_join.df$Longitude == 99),]$forced_geom = 'fips_centroid'
fips_join.df[which(fips_join.df$Longitude == 99),]$Longitude = fips_join.df[which(fips_join.df$Longitude == 99),]$fips_longitude
#-99 lat
fips_join.df[which(fips_join.df$Latitude == -99),]$forced_geom = 'fips_centroid'
fips_join.df[which(fips_join.df$Latitude == -99),]$Latitude = fips_join.df[which(fips_join.df$Latitude == -99),]$fips_latitude
#-99 long
fips_join.df[which(fips_join.df$Longitude == -99),]$forced_geom = 'fips_centroid'
fips_join.df[which(fips_join.df$Longitude == -99),]$Longitude = fips_join.df[which(fips_join.df$Longitude == -99),]$fips_longitude
#>90 lat
fips_join.df[which(fips_join.df$Latitude > 90),]$forced_geom = 'fips_centroid'
fips_join.df[which(fips_join.df$Latitude > 90),]$Latitude = fips_join.df[which(fips_join.df$Latitude > 90),]$fips_latitude
data_sp <- fips_join.df
data_sp_raw <- fips_join.df
coordinates(data_sp) <- c("Longitude", "Latitude") #sp_contain() requires a coordinates column
data_sp_cont <- sp_contain(paste(localpath,gdb_path,sep=""),layer_name,data_sp)
data_sp_cont <- data.frame(data_sp_cont)
data_huc6 <- paste('SELECT Facility_hydroid,
Poly_Name as HUC6_Name,
Poly_Code as HUC6_Code
FROM data_sp_cont
',sep="")
data_huc6 <- sqldf(data_huc6)
gdb_path <- "hydro-tools/GIS_LAYERS/WBD.gdb"
layer_name <- 'WBDHU8'
fips_centroids <- read.csv(paste("https://deq1.bse.vt.edu/d.dh/usafips_centroid_export",sep=""))
data_raw <- read.csv(paste(folder,source,sep=""))
data_sp <- data_raw
###########################################################################
# # PERFORM SPATIAL CONTAINMENT
# data_sp <- data_sp[-which(data_sp$Latitude > 90),]
#
# #PERFORM THIS PART IN SQL AS WELL:
# #Set NA, -99, or 99 coordinates to 0.0; This step is required for coordinates() function
# data_sp$Latitude[is.na(data_sp$Latitude)] = 0.0 #-9999
# data_sp$Longitude[is.na(data_sp$Longitude)] = 0.0
# data_sp$Latitude[data_sp$Latitude == 99] = 0.0
# data_sp$Latitude[data_sp$Latitude == -99] = 0.0
# data_sp$Longitude[data_sp$Longitude == 99] = 0.0
# data_sp$Longitude[data_sp$Longitude == -99] = 0.0
###########################################################################
###########################################################################
#data_sp[is.na(data_sp$Latitude)]
#which(is.na(data_sp$Latitude))
#which(fips_centroids$fips_code == 51001)
#data_sp[which(is.na(data_sp$Latitude)),]
fips_join <- paste("SELECT *
FROM data_sp AS a
LEFT OUTER JOIN fips_centroids AS b
ON (a.fips_code = b.fips_code)")
fips_join.df <- sqldf(fips_join)
fips_join.df$forced_geom <- ''
#Do all of this in SQL? or simplify with ORs, ANDs
#NA lat
fips_join.df[which(is.na(fips_join.df$Latitude)),]$forced_geom = 'fips_centroid'
fips_join.df[which(is.na(fips_join.df$Latitude)),]$Latitude = fips_join.df[which(is.na(fips_join.df$Latitude)),]$fips_latitude
#NA Long
fips_join.df[which(is.na(fips_join.df$Longitude)),]$forced_geom = 'fips_centroid'
fips_join.df[which(is.na(fips_join.df$Longitude)),]$Longitude = fips_join.df[which(is.na(fips_join.df$Longitude)),]$fips_longitude
#99 lat
fips_join.df[which(fips_join.df$Latitude == 99),]$forced_geom = 'fips_centroid'
fips_join.df[which(fips_join.df$Latitude == 99),]$Latitude = fips_join.df[which(fips_join.df$Latitude == 99),]$fips_latitude
#99 long
fips_join.df[which(fips_join.df$Longitude == 99),]$forced_geom = 'fips_centroid'
fips_join.df[which(fips_join.df$Longitude == 99),]$Longitude = fips_join.df[which(fips_join.df$Longitude == 99),]$fips_longitude
#-99 lat
fips_join.df[which(fips_join.df$Latitude == -99),]$forced_geom = 'fips_centroid'
fips_join.df[which(fips_join.df$Latitude == -99),]$Latitude = fips_join.df[which(fips_join.df$Latitude == -99),]$fips_latitude
#-99 long
fips_join.df[which(fips_join.df$Longitude == -99),]$forced_geom = 'fips_centroid'
fips_join.df[which(fips_join.df$Longitude == -99),]$Longitude = fips_join.df[which(fips_join.df$Longitude == -99),]$fips_longitude
#>90 lat
fips_join.df[which(fips_join.df$Latitude > 90),]$forced_geom = 'fips_centroid'
fips_join.df[which(fips_join.df$Latitude > 90),]$Latitude = fips_join.df[which(fips_join.df$Latitude > 90),]$fips_latitude
data_sp <- fips_join.df
data_sp_raw <- fips_join.df
###########################################################################
###########################################################################
coordinates(data_sp) <- c("Longitude", "Latitude") #sp_contain() requires a coordinates column
data_sp_cont <- sp_contain(paste(localpath,gdb_path,sep=""),layer_name,data_sp)
data_sp_cont <- data.frame(data_sp_cont)
data_huc8 <- paste('SELECT Facility_hydroid,
Poly_Name as HUC8_Name,
Poly_Code as HUC8_Code
FROM data_sp_cont
',sep="")
data_huc8 <- sqldf(data_huc8)
gdb_path <- "hydro-tools/GIS_LAYERS/WBD.gdb"
layer_name <- 'WBDHU10'
fips_centroids <- read.csv(paste("https://deq1.bse.vt.edu/d.dh/usafips_centroid_export",sep=""))
data_raw <- read.csv(paste(folder,source,sep=""))
data_sp <- data_raw
###########################################################################
# # PERFORM SPATIAL CONTAINMENT
# data_sp <- data_sp[-which(data_sp$Latitude > 90),]
#
# #PERFORM THIS PART IN SQL AS WELL:
# #Set NA, -99, or 99 coordinates to 0.0; This step is required for coordinates() function
# data_sp$Latitude[is.na(data_sp$Latitude)] = 0.0 #-9999
# data_sp$Longitude[is.na(data_sp$Longitude)] = 0.0
# data_sp$Latitude[data_sp$Latitude == 99] = 0.0
# data_sp$Latitude[data_sp$Latitude == -99] = 0.0
# data_sp$Longitude[data_sp$Longitude == 99] = 0.0
# data_sp$Longitude[data_sp$Longitude == -99] = 0.0
###########################################################################
###########################################################################
#data_sp[is.na(data_sp$Latitude)]
#which(is.na(data_sp$Latitude))
#which(fips_centroids$fips_code == 51001)
#data_sp[which(is.na(data_sp$Latitude)),]
fips_join <- paste("SELECT *
FROM data_sp AS a
LEFT OUTER JOIN fips_centroids AS b
ON (a.fips_code = b.fips_code)")
fips_join.df <- sqldf(fips_join)
fips_join.df$forced_geom <- ''
#Do all of this in SQL? or simplify with ORs, ANDs
#NA lat
fips_join.df[which(is.na(fips_join.df$Latitude)),]$forced_geom = 'fips_centroid'
fips_join.df[which(is.na(fips_join.df$Latitude)),]$Latitude = fips_join.df[which(is.na(fips_join.df$Latitude)),]$fips_latitude
#NA Long
fips_join.df[which(is.na(fips_join.df$Longitude)),]$forced_geom = 'fips_centroid'
fips_join.df[which(is.na(fips_join.df$Longitude)),]$Longitude = fips_join.df[which(is.na(fips_join.df$Longitude)),]$fips_longitude
#99 lat
fips_join.df[which(fips_join.df$Latitude == 99),]$forced_geom = 'fips_centroid'
fips_join.df[which(fips_join.df$Latitude == 99),]$Latitude = fips_join.df[which(fips_join.df$Latitude == 99),]$fips_latitude
#99 long
fips_join.df[which(fips_join.df$Longitude == 99),]$forced_geom = 'fips_centroid'
fips_join.df[which(fips_join.df$Longitude == 99),]$Longitude = fips_join.df[which(fips_join.df$Longitude == 99),]$fips_longitude
#-99 lat
fips_join.df[which(fips_join.df$Latitude == -99),]$forced_geom = 'fips_centroid'
fips_join.df[which(fips_join.df$Latitude == -99),]$Latitude = fips_join.df[which(fips_join.df$Latitude == -99),]$fips_latitude
#-99 long
fips_join.df[which(fips_join.df$Longitude == -99),]$forced_geom = 'fips_centroid'
fips_join.df[which(fips_join.df$Longitude == -99),]$Longitude = fips_join.df[which(fips_join.df$Longitude == -99),]$fips_longitude
#>90 lat
fips_join.df[which(fips_join.df$Latitude > 90),]$forced_geom = 'fips_centroid'
fips_join.df[which(fips_join.df$Latitude > 90),]$Latitude = fips_join.df[which(fips_join.df$Latitude > 90),]$fips_latitude
data_sp <- fips_join.df
data_sp_raw <- fips_join.df
###########################################################################
###########################################################################
coordinates(data_sp) <- c("Longitude", "Latitude") #sp_contain() requires a coordinates column
data_sp_cont <- sp_contain(paste(localpath,gdb_path,sep=""),layer_name,data_sp)
data_sp_cont <- data.frame(data_sp_cont)
data_huc10 <- paste('SELECT Facility_hydroid,
Poly_Name as HUC10_Name,
Poly_Code as HUC10_Code
FROM data_sp_cont
',sep="")
data_huc10 <- sqldf(data_huc10)
data_query <- paste("SELECT *
FROM data_sp_raw AS a
LEFT OUTER JOIN data_huc6 AS b
ON (a.Facility_hydroid = b.Facility_hydroid)")
data_HUCs <- sqldf(data_query)
add_huc8 <- paste("SELECT *
FROM data_HUCs AS a
LEFT OUTER JOIN data_huc8 AS b
ON (a.Facility_hydroid = b.Facility_hydroid)")
data_HUCs <- sqldf(add_huc8)
add_huc10 <- paste("SELECT *
FROM data_HUCs AS a
LEFT OUTER JOIN data_huc10 AS b
ON (a.Facility_hydroid = b.Facility_hydroid)")
data_HUCs <- sqldf(add_huc10)
View(data_HUCs)
write.csv(data_HUCs, paste(folder,"wsp2020.fac.all.HUC.csv",sep=""))
library("readxl")
library("kableExtra")
library("sqldf")
folder <- "U:/OWS/foundation_datasets/wsp/wsp2020/"
data_huc_raw <- read.csv(paste(folder,"wsp2020.fac.all.HUC.csv",sep=""))
HUC6.sql <- paste('SELECT HUC6_Name,
HUC6_Code,
COUNT(Facility_hydroid),
sum(fac_2020_mgy),
sum(fac_2040_mgy)
FROM data_huc_raw
GROUP BY HUC6_Code
',sep="")
HUC6_summary <- sqldf(HUC6.sql)
View(HUC6_summary)
View(HUC6_summary)
View(data_huc_raw)
library("readxl")
library("kableExtra")
library("sqldf")
# Location of source data
source <- "wsp2020.fac.all.csv"
#source <- "wsp2020.mp.all.csv"
folder <- "U:/OWS/foundation_datasets/wsp/wsp2020/"
# Location of GIS_functions and gdb
localpath <-"C:/Users/nrf46657/Desktop/VAHydro Development/GitHub/"
source(paste(localpath,'hydro-tools/GIS_LAYERS','GIS_functions.R',sep='/'));
###gdb_path <- "hydro-tools/GIS_LAYERS/HUC.gdb" #Location of HUC .gdb
###layer_name <- 'WBDHU6' #HUC6 layer withing the HUC .gdb
gdb_path <- "hydro-tools/GIS_LAYERS/WBD.gdb"
layer_name <- 'WBDHU10'
fips_centroids <- read.csv(paste("https://deq1.bse.vt.edu/d.dh/usafips_centroid_export",sep=""))
data_raw <- read.csv(paste(folder,source,sep=""))
data_sp <- data_raw
bogus_geom <- paste("SELECT *
FROM data_sp
WHERE Latitude == 99
")
bogus_geom.df <- sqldf(bogus_geom)
bogus_geom.df
bogus_geom <- paste("SELECT *
FROM data_sp
WHERE Latitude == 0 AND
Longitude == 0
")
bogus_geom.df <- sqldf(bogus_geom)
bogus_geom.df
bogus_geom <- paste("SELECT *
FROM data_sp
WHERE Latitude == 0 OR
Longitude == 0
")
bogus_geom.df <- sqldf(bogus_geom)
bogus_geom.df
bogus_geom <- paste("SELECT *
FROM data_sp
WHERE Latitude == 0 OR
Longitude == 0 OR
Latitude == 99 OR
Latitude == -99 OR
Longitude == 99 OR
Longitude == -99
")
bogus_geom.df <- sqldf(bogus_geom)
bogus_geom.df
View(bogus_geom.df)
bogus_geom <- paste("SELECT *
FROM data_sp
WHERE Latitude == 0 OR
Longitude == 0 OR
Latitude > 90 OR
Latitude == -99 OR
Longitude == 99 OR
Longitude == -99
")
bogus_geom.df <- sqldf(bogus_geom)
View(fips_centroids)
geom_update <- paste("UPDATE bogus_geom SET bogus_geom.Latitude=fips_centroids.fips_latitude
FROM bogus_geom
JOIN fips_centroids on (bogus_geom.fips_code=fips_centroids.fips_code)
")
geom_update
geom_update.df <- sqldf(geom_update)
fips_centroids.fips_latitude
fips_join <- paste("SELECT *
FROM data_sp AS a
LEFT OUTER JOIN fips_centroids AS b
ON (a.fips_code = b.fips_code)")
fips_join.df <- sqldf(fips_join)
fips_join.df
View(fips_join.df)
geom_update <- paste("UPDATE bogus_geom SET bogus_geom.Latitude=bogus_geom.fips_latitude
FROM bogus_geom
JOIN bogus_geom on (bogus_geom.fips_code=bogus_geom.fips_code)
")
geom_update.df <- sqldf(geom_update)
View(fips_join.df)
geom_update <- paste("UPDATE fips_join.df
SET Latitude = fips_latitude
")
geom_update.df <- sqldf(geom_update)
fips_join.df
fips_join <- paste("SELECT *
FROM data_sp AS a
LEFT OUTER JOIN fips_centroids AS b
ON (a.fips_code = b.fips_code)")
fips_join.df <- sqldf(fips_join)
fips_join.df
geom_update <- paste("UPDATE fips_join.df
SET Latitude = fips_latitude
")
geom_update.df <- sqldf(geom_update)
fips_join <- paste("SELECT *
FROM data_sp AS a
LEFT OUTER JOIN fips_centroids AS b
ON (a.fips_code = b.fips_code)")
fips_join <- sqldf(fips_join)
fips_join
geom_update <- paste("UPDATE fips_join
SET Latitude = fips_latitude
")
geom_update.df <- sqldf(geom_update)
geom_update.df
geom_update.df <- dbExecute(geom_update)
geom_update.df <- dbSendStatemen(geom_update)
geom_update.df <- dbSendQuery(geom_update)
geom_update.df <- dbGetQuery(geom_update)
fips_join
geom_update <- paste(c("UPDATE fips_join
SET Latitude = fips_latitude,
WHERE Latitude == 0",
"SELECT * FROM fips_join
"))
geom_update.df <- sqldf(geom_update)
geom_update <- paste(c("UPDATE fips_join
SET Latitude = fips_latitude
WHERE Latitude == 0",
"SELECT * FROM fips_join
"))
geom_update.df <- sqldf(geom_update)
geom_update.df <- dbGetQuery(geom_update)
geom_update.df <- dbSendStatement(geom_update)
library(DBI)
geom_update <- paste(c("UPDATE fips_join
SET Latitude = fips_latitude
WHERE Latitude == 0",
"SELECT * FROM fips_join
"))
geom_update.df <- dbGetQuery(geom_update)
fips_join
df<-sqldf(c("update fips_join
set Latitude=16
where Latitude=0",
"select * from fips_join"))
library(DBI)
df<-dbSendStatement(c("update fips_join
set Latitude=16
where Latitude=0",
"select * from fips_join"))
library(RMySQL)
install.packages("RMySQL")
library(RMySQL)
df<-dbSendStatement(c("update fips_join
set Latitude=16
where Latitude=0",
"select * from fips_join"))
RMySQL
RMySQL()
df<-dbFetch(c("update fips_join
set Latitude=16
where Latitude=0",
"select * from fips_join"))
df<-dbGetQuery(c("update fips_join
set Latitude=16
where Latitude=0",
"select * from fips_join"))
df<-sqldf(c("update fips_join
set Latitude=16
where Latitude=0",
"select * from fips_join"))
df<-sqldf(c("update fips_join
set Latitude=16
where Latitude=0",
"select * from fips_join"))
library("sqldf")
df<-sqldf(c("update fips_join
set Latitude=16
where Latitude=0",
"select * from fips_join"))
