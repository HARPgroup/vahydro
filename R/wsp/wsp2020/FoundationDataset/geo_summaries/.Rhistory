library(ggplot2)
library(rgeos)
library(ggsn)
library(rgdal)
library(dplyr)
library(sf) # needed for st_read()
library(sqldf)
library(kableExtra)
library(viridis) #magma
######################################################################################################
### LOAD LAYERS  #####################################################################################
######################################################################################################
STATES <- read.table(file = 'https://raw.githubusercontent.com/HARPgroup/cbp6/master/code/GIS_LAYERS/STATES.tsv', sep = '\t', header = TRUE)
MinorBasins.csv <- read.table(file = 'https://raw.githubusercontent.com/HARPgroup/hydro-tools/master/GIS_LAYERS/MinorBasins.csv', sep = ',', header = TRUE)
RSeg <- read.table(file = 'C:/Users/nrf46657/Desktop/VAHydro Development/GitHub/hydro-tools/GIS_LAYERS/VAHydro_RSegs.csv', sep = ',', header = TRUE)
folder <- "U:/OWS/foundation_datasets/wsp/wsp2020/"
data_rseg_raw <- read.csv(paste(folder,"wsp2020.fac.all.MinorBasins_RSegs.csv",sep=""))
#specify spatial extent for map
extent <- data.frame(x = c(-84, -75),
y = c(35, 41))
#bounding box
bb=readWKT(paste0("POLYGON((",extent$x[1]," ",extent$y[1],",",extent$x[2]," ",extent$y[1],",",extent$x[2]," ",extent$y[2],",",extent$x[1]," ",extent$y[2],",",extent$x[1]," ",extent$y[1],"))",sep=""))
bbProjected <- SpatialPolygonsDataFrame(bb,data.frame("id"), match.ID = FALSE)
bbProjected@data$id <- rownames(bbProjected@data)
bbPoints <- fortify(bbProjected, region = "id")
bbDF <- merge(bbPoints, bbProjected@data, by = "id")
rm.IN <- paste('SELECT *
FROM STATES
WHERE state != "IN"
',sep="")
STATES <- sqldf(rm.IN)
STATES$id <- as.numeric(rownames(STATES))
state.list <- list()
for (i in 1:length(STATES$state)) {
print(paste("i = ",i,sep=''))
print(as.character(STATES$state[i]))
state_geom <- readWKT(STATES$geom[i])
#print(state_geom)
state_geom_clip <- gIntersection(bb, state_geom)
stateProjected <- SpatialPolygonsDataFrame(state_geom_clip, data.frame('id'), match.ID = TRUE)
stateProjected@data$id <- as.character(i)
state.list[[i]] <- stateProjected
}
state <- do.call('rbind', state.list)
state@data <- merge(state@data, STATES, by = 'id')
state@data <- state@data[,-c(2:3)]
state.df <- fortify(state, region = 'id')
state.df <- merge(state.df, state@data, by = 'id')
colnames(st_data)
st_data <- MinorBasins.csv
colnames(st_data)
colnames(st_data)
library(ggplot2)
library(rgeos)
library(ggsn)
library(rgdal)
library(dplyr)
library(sf) # needed for st_read()
library(sqldf)
library(kableExtra)
library(viridis) #magma
######################################################################################################
### LOAD LAYERS  #####################################################################################
######################################################################################################
STATES <- read.table(file = 'https://raw.githubusercontent.com/HARPgroup/cbp6/master/code/GIS_LAYERS/STATES.tsv', sep = '\t', header = TRUE)
MinorBasins.csv <- read.table(file = 'https://raw.githubusercontent.com/HARPgroup/hydro-tools/master/GIS_LAYERS/MinorBasins.csv', sep = ',', header = TRUE)
RSeg <- read.table(file = 'C:/Users/nrf46657/Desktop/VAHydro Development/GitHub/hydro-tools/GIS_LAYERS/VAHydro_RSegs.csv', sep = ',', header = TRUE)
folder <- "U:/OWS/foundation_datasets/wsp/wsp2020/"
data_rseg_raw <- read.csv(paste(folder,"wsp2020.fac.all.MinorBasins_RSegs.csv",sep=""))
metrics <- read.table(file = 'https://deq1.bse.vt.edu/d.dh/entity-model-prop-level-export/67752/dh_feature/watershed/vahydro/vahydro-1.0/runid_13/all', sep = ',', header = TRUE)
'
View(metrics)
'
View(metrics)
metrics <- read.table(file = 'https://deq1.bse.vt.edu/d.dh/entity-model-prop-level-export/all/dh_feature/watershed/vahydro/vahydro-1.0/runid_13/l90_Qout', sep = ',', header = TRUE)
extent <- data.frame(x = c(-84, -75),
y = c(35, 41))
#bounding box
bb=readWKT(paste0("POLYGON((",extent$x[1]," ",extent$y[1],",",extent$x[2]," ",extent$y[1],",",extent$x[2]," ",extent$y[2],",",extent$x[1]," ",extent$y[2],",",extent$x[1]," ",extent$y[1],"))",sep=""))
bbProjected <- SpatialPolygonsDataFrame(bb,data.frame("id"), match.ID = FALSE)
bbProjected@data$id <- rownames(bbProjected@data)
bbPoints <- fortify(bbProjected, region = "id")
bbDF <- merge(bbPoints, bbProjected@data, by = "id")
######################################################################################################
### PROCESS STATES LAYER  ############################################################################
######################################################################################################
#Need to remove Indiana due to faulty geom
rm.IN <- paste('SELECT *
FROM STATES
WHERE state != "IN"
',sep="")
STATES <- sqldf(rm.IN)
STATES$id <- as.numeric(rownames(STATES))
state.list <- list()
#i <- 1
for (i in 1:length(STATES$state)) {
print(paste("i = ",i,sep=''))
print(as.character(STATES$state[i]))
state_geom <- readWKT(STATES$geom[i])
#print(state_geom)
state_geom_clip <- gIntersection(bb, state_geom)
stateProjected <- SpatialPolygonsDataFrame(state_geom_clip, data.frame('id'), match.ID = TRUE)
stateProjected@data$id <- as.character(i)
state.list[[i]] <- stateProjected
}
state <- do.call('rbind', state.list)
state@data <- merge(state@data, STATES, by = 'id')
state@data <- state@data[,-c(2:3)]
state.df <- fortify(state, region = 'id')
state.df <- merge(state.df, state@data, by = 'id')
######################################################################################################
### PROCESS Minor Basin LAYER  #######################################################################
######################################################################################################
st_data <- MinorBasins.csv
st_data$id <- as.character(row_number(st_data$code))
MB.list <- list()
for (z in 1:length(st_data$code)) {
print(paste("z = ",z,sep=''))
print(st_data$code[z])
MB_geom <- readWKT(st_data$geom[z])
#print(MB_geom)
MB_geom_clip <- gIntersection(bb, MB_geom)
MBProjected <- SpatialPolygonsDataFrame(MB_geom_clip, data.frame('id'), match.ID = TRUE)
MBProjected@data$id <- as.character(z)
MB.list[[z]] <- MBProjected
}
MB <- do.call('rbind', MB.list)
MB@data <- merge(MB@data, st_data, by = 'id')
MB@data <- MB@data[,-c(2:3)]
MB.df <- fortify(MB, region = 'id')
MB.df <- merge(MB.df, MB@data, by = 'id')
data_rseg_nohydro <-  data_rseg_raw
with_hydro <- length(data_rseg_nohydro[,1])
rseg_nohydro <- paste("SELECT *
FROM data_rseg_nohydro
WHERE facility_ftype != 'hydropower'")
rseg_nohydro <- sqldf(rseg_nohydro)
without_hydro <- length(rseg_nohydro[,1])
print(paste('Number of hydropower facilities removed: ',with_hydro-without_hydro,sep=''))
data_rseg <- data_rseg_nohydro
#data_rseg <- data_rseg_raw
######################################################################################################
# SUMMARIZE DATA BY VAHYDRO RIVER SEGMENT
RSeg.sql <- paste("SELECT VAHydro_RSeg_Name,
VAHydro_RSeg_Code,
COUNT(Facility_hydroid),
sum(fac_2020_mgy) AS mgy_2020,
sum(fac_2040_mgy) AS mgy_2040
FROM data_rseg
GROUP BY VAHydro_RSeg_Code
",sep="")
RSeg_summary <- sqldf(RSeg.sql)
######################################################################################################
# REMOVE SUPER LARGE VALUES - FOR QA PURPOSES ONLY
# with_lg <- length(RSeg_summary[,1])
# summary_sort <- paste("SELECT *
#                   FROM RSeg_summary
#                   WHERE mgy_2020 < 200000
#                   ORDER BY mgy_2020 DESC")
# summary_sort <- sqldf(summary_sort)
# RSeg_summary <- summary_sort
# without_lg <- length(RSeg_summary[,1])
# print(paste('Number of large values removed: ',with_lg-without_lg,sep=''))
#
######################################################################################################
RSeg_raw <- RSeg
length(RSeg_raw[,1])
# JOIN DATA BY RIVER SEGMENT TO RIVER SEGMENT GEOMETRY LAYER
RSeg_data <- paste("SELECT *
FROM RSeg AS a
LEFT OUTER JOIN RSeg_summary AS b
ON (a.hydrocode = b.VAHydro_RSeg_Code)")
RSeg_data <- sqldf(RSeg_data)
length(RSeg_data[,1])
# REMOVE ANY WITH EMPTY GEOMETRY FIELD (NEEDED PRIOR TO GEOPROCESSING)
RSeg_valid_geoms <- paste("SELECT *
FROM RSeg_data
WHERE geom != ''")
RSeg_data <- sqldf(RSeg_valid_geoms)
length(RSeg_data[,1])
colnames(metrics)
View(metrics)
metric_data <- paste("SELECT *
FROM RSeg AS a
LEFT OUTER JOIN metrics AS b
ON (a.hydrocode = b.hydrocode)")
metric_data <- sqldf(metric_data)
metric_data <- st_as_sf(metric_data, wkt = 'geom')
colnames(metric_data)
metric_data <- paste("SELECT *
FROM RSeg AS a
LEFT OUTER JOIN metrics AS b
ON (a.hydrocode = b.hydrocode)")
metric_data <- sqldf(metric_data)
length(metric_data[,1])
metric_valid_geoms <- paste("SELECT *
FROM metric_data
WHERE geom != ''")
metric_data <- sqldf(metric_valid_geoms)
length(RSeg_data[,1])
length(metric_data[,1])
metric_data <- st_as_sf(metric_data, wkt = 'geom')
#SET UP BASE MAP
base_map  <- ggplot(data = state.df, aes(x = long, y = lat, group = group))+
geom_polygon(data = bbDF, color="black", fill = "powderblue",lwd=0.5)+
geom_polygon(data = state.df, color="gray46", fill = "gray",lwd=0.5)
colnames(metric_data)
map <- base_map +
#no group on this layer, so don't inherit aes
#geom_sf(data = RSeg_data,aes(geometry = geom,fill = mgy_2020), inherit.aes = FALSE)+
geom_sf(data = metric_data,aes(geometry = geom,fill = attribute_value), inherit.aes = FALSE)+
geom_polygon(data = MB.df, color="black", fill = NA,lwd=0.5)+
#geom_point(data = data_rseg_raw, aes(x = corrected_longitude, y = corrected_latitude,group = 123), size = 1, shape = 20, fill = "darkblue")+
guides(fill=guide_colorbar(title="Legend\n2020 (MGY)")) +
scale_fill_gradient2(low = 'white',high = 'blue',
labels=function(x) format(x, big.mark = ",", scientific = FALSE),
trans = "log10") +
theme(legend.justification=c(0,1), legend.position=c(0,1)) +
xlab('Longitude (deg W)') + ylab('Latitude (deg N)')+
north(bbDF, location = 'topright', symbol = 12, scale=0.1)+
scalebar(bbDF, location = 'bottomleft', dist = 100, dist_unit = 'mi',
transform = TRUE, model = 'WGS84',st.bottom=FALSE,
st.size = 3.5, st.dist = 0.0285,
anchor = c(
x = (((extent$x[2] - extent$x[1])/2)+extent$x[1])-2.0,
y = extent$y[1]+(extent$y[1])*0.001
))
ggsave(plot = map, file = paste0(folder, "state_plan_figures/2020_RSeg_l90.png"), width=6.5, height=5)
map <- base_map +
#no group on this layer, so don't inherit aes
#geom_sf(data = RSeg_data,aes(geometry = geom,fill = mgy_2020), inherit.aes = FALSE)+
geom_sf(data = metric_data,aes(geometry = geom,fill = attribute_value), inherit.aes = FALSE)+
geom_polygon(data = MB.df, color="black", fill = NA,lwd=0.5)+
#geom_point(data = data_rseg_raw, aes(x = corrected_longitude, y = corrected_latitude,group = 123), size = 1, shape = 20, fill = "darkblue")+
guides(fill=guide_colorbar(title="Legend\n2020 (MGY)")) +
# scale_fill_gradient2(low = 'white',high = 'blue',
#                      labels=function(x) format(x, big.mark = ",", scientific = FALSE),
#                      trans = "log10") +
scale_fill_gradient2(low = 'white',high = 'blue',
labels=function(x) format(x, big.mark = ",", scientific = FALSE)) +
theme(legend.justification=c(0,1), legend.position=c(0,1)) +
xlab('Longitude (deg W)') + ylab('Latitude (deg N)')+
north(bbDF, location = 'topright', symbol = 12, scale=0.1)+
scalebar(bbDF, location = 'bottomleft', dist = 100, dist_unit = 'mi',
transform = TRUE, model = 'WGS84',st.bottom=FALSE,
st.size = 3.5, st.dist = 0.0285,
anchor = c(
x = (((extent$x[2] - extent$x[1])/2)+extent$x[1])-2.0,
y = extent$y[1]+(extent$y[1])*0.001
))
ggsave(plot = map, file = paste0(folder, "state_plan_figures/2020_RSeg_l90.png"), width=6.5, height=5)
ggsave(plot = map, file = paste0(folder, "state_plan_figures/2020_RSeg_l90.png"), width=6.5, height=5)
class(metric_data)
class(metric_data$attribute_value)
class(metric_data$attribute_value)
metric_data$attribute_value=as.numeric(levels(metric_data$attribute_value))[metric_data$attribute_value]
class(metric_data$attribute_value)
map <- base_map +
#no group on this layer, so don't inherit aes
#geom_sf(data = RSeg_data,aes(geometry = geom,fill = mgy_2020), inherit.aes = FALSE)+
geom_sf(data = metric_data,aes(geometry = geom,fill = attribute_value), inherit.aes = FALSE)+
geom_polygon(data = MB.df, color="black", fill = NA,lwd=0.5)+
#geom_point(data = data_rseg_raw, aes(x = corrected_longitude, y = corrected_latitude,group = 123), size = 1, shape = 20, fill = "darkblue")+
guides(fill=guide_colorbar(title="Legend\n2020 (MGY)")) +
# scale_fill_gradient2(low = 'white',high = 'blue',
#                      labels=function(x) format(x, big.mark = ",", scientific = FALSE),
#                      trans = "log10") +
scale_fill_gradient2(low = 'white',high = 'blue',
labels=function(x) format(x, big.mark = ",", scientific = FALSE)) +
theme(legend.justification=c(0,1), legend.position=c(0,1)) +
xlab('Longitude (deg W)') + ylab('Latitude (deg N)')+
north(bbDF, location = 'topright', symbol = 12, scale=0.1)+
scalebar(bbDF, location = 'bottomleft', dist = 100, dist_unit = 'mi',
transform = TRUE, model = 'WGS84',st.bottom=FALSE,
st.size = 3.5, st.dist = 0.0285,
anchor = c(
x = (((extent$x[2] - extent$x[1])/2)+extent$x[1])-2.0,
y = extent$y[1]+(extent$y[1])*0.001
))
ggsave(plot = map, file = paste0(folder, "state_plan_figures/2020_RSeg_l90.png"), width=6.5, height=5)
base_map  <- ggplot(data = state.df, aes(x = long, y = lat, group = group))+
geom_polygon(data = bbDF, color="black", fill = "powderblue",lwd=0.5)+
geom_polygon(data = state.df, color="gray46", fill = "gray",lwd=0.5)
#ADD LAYER OF INTEREST
map <- base_map +
#no group on this layer, so don't inherit aes
#geom_sf(data = RSeg_data,aes(geometry = geom,fill = mgy_2020), inherit.aes = FALSE)+
geom_sf(data = metric_data,aes(geometry = geom,fill = attribute_value), inherit.aes = FALSE)+
geom_polygon(data = MB.df, color="black", fill = NA,lwd=0.5)+
#geom_point(data = data_rseg_raw, aes(x = corrected_longitude, y = corrected_latitude,group = 123), size = 1, shape = 20, fill = "darkblue")+
guides(fill=guide_colorbar(title="Legend\n2020 (MGY)")) +
# scale_fill_gradient2(low = 'white',high = 'blue',
#                      labels=function(x) format(x, big.mark = ",", scientific = FALSE),
#                      trans = "log10") +
scale_fill_gradient2(low = 'white',high = 'blue',
labels=function(x) format(x, big.mark = ",", scientific = FALSE)) +
theme(legend.justification=c(0,1), legend.position=c(0,1)) +
xlab('Longitude (deg W)') + ylab('Latitude (deg N)')+
north(bbDF, location = 'topright', symbol = 12, scale=0.1)+
scalebar(bbDF, location = 'bottomleft', dist = 100, dist_unit = 'mi',
transform = TRUE, model = 'WGS84',st.bottom=FALSE,
st.size = 3.5, st.dist = 0.0285,
anchor = c(
x = (((extent$x[2] - extent$x[1])/2)+extent$x[1])-2.0,
y = extent$y[1]+(extent$y[1])*0.001
))
map
length(metric_data[,1])
length(metric_data[1])
length(metric_data[,1])
length(metric_data[1,])
length(metric_data[,2])
length(metric_data[,1])
length(metric_data[1,1])
metric_data[1,1]
metric_data$attribute_value
metric_data <- paste("SELECT *
FROM RSeg AS a
LEFT OUTER JOIN metrics AS b
ON (a.hydrocode = b.hydrocode)")
metric_data <- sqldf(metric_data)
length(metric_data[,1])
metric_valid_geoms <- paste("SELECT *
FROM metric_data
WHERE geom != ''")
metric_data <- sqldf(metric_valid_geoms)
length(metric_data[,1])
metric_data <- st_as_sf(metric_data, wkt = 'geom')
metric_data$attribute_value
vahydrosw_wshed_NR3_9310_9240 <- read.table(file = 'https://deq1.bse.vt.edu/d.dh/entity-model-prop-level-export/68042/dh_feature/watershed/vahydro/vahydro-1.0/runid_13/l90_Qout', sep = ',', header = TRUE)
vahydrosw_wshed_NR3_9310_9240
View(vahydrosw_wshed_NR3_9310_9240)
vahydrosw_wshed_NR3_9310_9240 <- read.table(file = 'https://deq1.bse.vt.edu/d.dh/entity-model-prop-level-export/68042/dh_feature/watershed/vahydro/vahydro-1.0/runid_11/l90_Qout', sep = ',', header = TRUE)
vahydrosw_wshed_NR3_9310_9240 <- read.table(file = 'https://deq1.bse.vt.edu/d.dh/entity-model-prop-level-export/68042/dh_feature/watershed/vahydro/vahydro-1.0/runid_11/all', sep = ',', header = TRUE)
# dirs/URLs
save_directory <- "/var/www/html/files/fe/plots"
#----------------------------------------------
site <- "http://deq2.bse.vt.edu/d.dh"    #Specify the site of interest, either d.bet OR d.dh
#----------------------------------------------
# Load Libraries
basepath='/var/www/R';
source(paste(basepath,'config.R',sep='/'))
# Now do the stuff
elid = 	351939  # 236079  # 278660 #345486 #344054
runid = 11
elid = 	351939  # 236079  # 278660 #345486 #344054
runid = 11
omsite = site <- "http://deq2.bse.vt.edu"
dat <- fn_get_runfile(elid, runid, site= omsite,  cached = FALSE)
omsite = site <- "http://deq2.bse.vt.edu"
dat <- fn_get_runfile(elid, runid, site= omsite,  cached = FALSE)
source(paste('C:/Users/nrf46657/Desktop/VAHydro Development/GitHub/hydro-tools','fn_vahydro-1.0.R',sep='/'))
source(paste('C:/Users/nrf46657/Desktop/VAHydro Development/GitHub/hydro-tools/VAHydro-1.0','fn_vahydro-1.0.R',sep='/'))
dat <- fn_get_runfile(elid, runid, site= omsite,  cached = FALSE)
mean(as.numeric(dat$Qout))
dat
tail(dat)
source(paste('C:/Users/nrf46657/Desktop/VAHydro Development/GitHub/hydro-tools/VAHydro-1.0','fn_vahydro-1.0.R',sep='/'))
dat <- fn_get_runfile(elid, runid, site= omsite,  cached = FALSE)
mean(as.numeric(dat$Qout))
tail(dat)
metric_data[,1]
metric_data[,2]
metric_data[,3]
metric_data[,4]
elid = 	351939  # 236079  # 278660 #345486 #344054
runid = 11
omsite = site <- "http://deq2.bse.vt.edu"
source(paste('C:/Users/nrf46657/Desktop/VAHydro Development/GitHub/hydro-tools/VAHydro-1.0','fn_vahydro-1.0.R',sep='/'))
dat <- fn_get_runfile(elid, runid, site= omsite,  cached = FALSE)
mean(as.numeric(dat$Qout))
tail(dat)
