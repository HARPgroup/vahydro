#
#
#
# rseg_default_info = list(
#   model_overview = list(
#     "value" = "River segment model overview not provided."
#   )
# )
#
# rseg_report_info <- merge.list(rseg_report_info, rseg_default_info)
#
# # Pre load the output runs so we have them available for later use
# # I think the om_get_prop here is no longer needed, rather, we
# short_names = list()
# run_names = list()
#
# for (i in 1:length(runid.list)){
#   # get fac model run prop
#   # get river model run prop
#   runid.i <- runid.list[i]
#   run.i <- sub("runid_", "", runid.i)
#
# }
rseg_metrics.df
rseg.model.r
rseg_report_info.r
rseg_model_info.r
rseg_report_info.r
rseg.metric.list
run.r
run.r
rseg_table.r
rmarkdown::render('C:/Users/nrf46657/Desktop/GitHub/vahydro/R/modeling/hsp2_validation/hsp2_Summary.Rmd',
output_file = 'C:/Users/nrf46657/Desktop/GitHub/plots/TestMarkdownDoc',
params = list(doc_title = "Test HSP2 Model Summary",
rseg.hydroid = c("JA4_7280_7340","vahydrosw_wshed_JA4_7280_7340"),
rseg.ftype = c("cbp60","vahydro"),
model.version = c("cbp-6.0","vahydro-1.0"),
runid.list = c("hsp2_2022","runid_11")
)
)
rmarkdown::render('C:/Users/nrf46657/Desktop/GitHub/vahydro/R/modeling/hsp2_validation/hsp2_Summary.Rmd',
output_file = 'C:/Users/nrf46657/Desktop/GitHub/plots/TestMarkdownDoc',
params = list(doc_title = "Test HSP2 Model Summary",
rseg.hydrocode = c("JA4_7280_7340","vahydrosw_wshed_JA4_7280_7340"),
rseg.ftype = c("cbp60","vahydro"),
model.version = c("cbp-6.0","vahydro-1.0"),
runid.list = c("hsp2_2022","runid_11")
)
)
rmarkdown::render('C:/Users/nrf46657/Desktop/GitHub/vahydro/R/modeling/hsp2_validation/hsp2_Summary.Rmd',
output_file = 'C:/Users/nrf46657/Desktop/GitHub/plots/TestMarkdownDoc',
params = list(doc_title = "Test HSP2 Model Summary",
rseg.hydrocode = c("JA4_7280_7340","vahydrosw_wshed_JA4_7280_7340"),
rseg.ftype = c("cbp60","vahydro"),
model.version = c("cbp-6.0","vahydro-1.0"),
runid.list = c("hsp2_2022","runid_11")
)
)
r <- 2
rseg.hydrocode.r <- rseg.hydrocode[r]
rseg.ftype.r <- rseg.ftype[r]
rseg.hydrocode.r
rseg.ftype.r
rseg_feature <- RomFeature$new(
ds,
list(hydrocode = rseg.hydrocode.r, ftype = rseg.ftype.r),
TRUE
)
rseg_feature
rseg.hydroid.r
model.version.r <- model.version[r]
print(paste("searching", model.version.r,"model for river segment hydroid", rseg.hydroid.r))
rseg.model.r <- RomProperty$new(
ds,
list(entity_type='dh_feature', featureid = rseg.hydroid.r, propcode=model.version.r),
TRUE
)
rseg.model.r
exists("json_obj_url")
rseg_obj_url.r <- paste(json_obj_url, rseg.model.r$pid, sep="/")
rseg_model_info.r <- ds$auth_read(rseg_obj_url.r, "text/json", "")
rseg_model_info.r <- fromJSON(rseg_model_info.r)
rseg.elid.r <- rseg_model_info.r[[1]]$om_element_connection$value
rseg_report_info.r = find_name(rseg_model_info.r, "reports")
rseg_model_info.r
rseg_model_info.r[[1]]$om_element_connection$value
rseg_report_info.r
rseg.elid.r
rseg_report_info.r = find_name(rseg_model_info.r, "reports")
rseg_report_info.r
rseg_default_info.r = list(
model_overview.r = list(
"value" = "River segment model overview not provided."
)
)
rseg_default_info.r
rseg_report_info.r <- merge.list(rseg_report_info.r, rseg_default_info.r)
rseg_report_info.r
runid.r <- runid.list[r]
runid.r
run.r <- sub("runid_", "", runid.r)
run.r
rseg_table.r <- om_model_table(model_info = rseg_model_info.r,
runid.list = run.r,
metric.list = rseg.metric.list,
include.elfgen = TRUE,
site = site,
site_base = omsite
)
rseg_table.r
rseg_table.r
rseg_table.r <- om_model_table(model_info = rseg_model_info.r,
runid.list = runid.r,
metric.list = rseg.metric.list,
include.elfgen = TRUE,
site = site,
site_base = omsite
)
rseg_table.r
rmarkdown::render('C:/Users/nrf46657/Desktop/GitHub/vahydro/R/modeling/hsp2_validation/hsp2_Summary.Rmd',
output_file = 'C:/Users/nrf46657/Desktop/GitHub/plots/TestMarkdownDoc',
params = list(doc_title = "Test HSP2 Model Summary",
rseg.hydrocode = c("JA4_7280_7340","vahydrosw_wshed_JA4_7280_7340"),
rseg.ftype = c("cbp60","vahydro"),
model.version = c("cbp-6.0","vahydro-1.0"),
runid.list = c("hsp2_2022","runid_11")
)
)
r <- 1
# get rseg feature
rseg.hydrocode.r <- rseg.hydrocode[r]
rseg.ftype.r <- rseg.ftype[r]
rseg_feature <- RomFeature$new(
ds,
list(hydrocode = rseg.hydrocode.r, ftype = rseg.ftype.r),
TRUE
)
rseg.hydroid.r <- rseg_feature$hydroid
# get rseg model
model.version.r <- model.version[r]
print(paste("searching", model.version.r,"model for river segment hydroid", rseg.hydroid.r))
rseg.model.r <- RomProperty$new(
ds,
list(entity_type='dh_feature', featureid = rseg.hydroid.r, propcode=model.version.r),
TRUE
)
rseg_obj_url.r <- paste(json_obj_url, rseg.model.r$pid, sep="/")
rseg_model_info.r <- ds$auth_read(rseg_obj_url.r, "text/json", "")
rseg_model_info.r <- fromJSON(rseg_model_info.r)
rseg.elid.r <- rseg_model_info.r[[1]]$om_element_connection$value
rseg_report_info.r = find_name(rseg_model_info.r, "reports")
rseg.elid.r
rseg_report_info.r
rseg_default_info.r = list(
model_overview.r = list(
"value" = "River segment model overview not provided."
)
)
rseg_report_info.r <- merge.list(rseg_report_info.r, rseg_default_info.r)
rseg_report_info.r
runid.r <- runid.list[r]
runid.r
rseg_model_info.r
runid.r
rmarkdown::render('C:/Users/nrf46657/Desktop/GitHub/vahydro/R/modeling/hsp2_validation/hsp2_Summary.Rmd',
output_file = 'C:/Users/nrf46657/Desktop/GitHub/plots/TestMarkdownDoc',
params = list(doc_title = "Test HSP2 Model Summary",
rseg.hydrocode = c("JA4_7280_7340","vahydrosw_wshed_JA4_7280_7340"),
rseg.ftype = c("cbp60","vahydro"),
model.version = c("cbp-6.0","vahydro-1.0"),
runid.list = c("hsp2_2022","runid_11")
)
)
rmarkdown::render('C:/Users/nrf46657/Desktop/GitHub/vahydro/R/modeling/hsp2_validation/hsp2_Summary.Rmd',
output_file = 'C:/Users/nrf46657/Desktop/GitHub/plots/TestMarkdownDoc',
params = list(doc_title = "Test HSP2 Model Summary",
rseg.hydrocode = c("JA4_7280_7340","vahydrosw_wshed_JA4_7280_7340"),
rseg.ftype = c("cbp60","vahydro"),
model.version = c("cbp-6.0","vahydro-1.0"),
runid.list = c("hsp2_2022","runid_11")
)
)
rmarkdown::render('C:/Users/nrf46657/Desktop/GitHub/vahydro/R/modeling/hsp2_validation/hsp2_Summary.Rmd',
output_file = 'C:/Users/nrf46657/Desktop/GitHub/plots/TestMarkdownDoc',
params = list(doc_title = "Test HSP2 Model Summary",
rseg.hydrocode = c("JA4_7280_7340","vahydrosw_wshed_JA4_7280_7340"),
rseg.ftype = c("cbp60","vahydro"),
model.version = c("cbp-6.0","vahydro-1.0"),
runid.list = c("hsp2_2022","runid_11")
)
)
rmarkdown::render('C:/Users/nrf46657/Desktop/GitHub/vahydro/R/modeling/hsp2_validation/hsp2_Summary.Rmd',
output_file = 'C:/Users/nrf46657/Desktop/GitHub/plots/TestMarkdownDoc',
params = list(doc_title = "Test HSP2 Model Summary",
rseg.hydrocode = c("JA4_7280_7340","vahydrosw_wshed_JA4_7280_7340"),
rseg.ftype = c("cbp60","vahydro"),
model.version = c("cbp-6.0","vahydro-1.0"),
runid.list = c("hsp2_2022","runid_11")
)
)
rmarkdown::render('C:/Users/nrf46657/Desktop/GitHub/vahydro/R/modeling/hsp2_validation/hsp2_Summary.Rmd',
output_file = 'C:/Users/nrf46657/Desktop/GitHub/plots/TestMarkdownDoc',
params = list(doc_title = "Test HSP2 Model Summary",
rseg.hydrocode = c("JA4_7280_7340","vahydrosw_wshed_JA4_7280_7340"),
rseg.ftype = c("cbp60","vahydro"),
model.version = c("cbp-6.0","vahydro-1.0"),
runid.list = c("hsp2_2022","runid_11")
)
)
#https://cran.r-project.org/web/packages/officedown/officedown.pdf
#https://ardata-fr.github.io/officeverse/officedown-for-word.html#insert-sections
knitr::opts_chunk$set(echo = TRUE, fig.cap = TRUE)
library(officedown)
library(officer)
library(flextable)
library(hydrotools)
library(rjson)
basepath='/var/www/R'
source('/var/www/R/config.R')
ds <- RomDataSource$new("http://deq1.bse.vt.edu/d.dh", rest_uname)
ds$get_token(rest_pw)
# Load functions used during development
source("https://raw.githubusercontent.com/HARPgroup/hydro-tools/master/VAHydro-2.0/fn_get_prop.R")
source("https://raw.githubusercontent.com/HARPgroup/hydro-tools/master/VAHydro-2.0/rest_functions.R")
source("https://raw.githubusercontent.com/HARPgroup/hydro-tools/master/VAHydro-2.0/find_name.R")
fp <- fp_par(
text.align = "center",
padding.bottom = 20, padding.top = 120,
border.bottom = fp_border())
ft <- fp_text(shading.color='#EFEFEF', bold = TRUE)
rseg.hydrocode <- params$rseg.hydrocode
rseg.ftype <- params$rseg.ftype
model.version <- params$model.version
runid.list <- params$runid.list
rseg.metric.list <- params$rseg.metric.list
rlist <- gsub('runid_', '', runid.list)
r <- 1
# get rseg feature
rseg.hydrocode.r <- rseg.hydrocode[r]
rseg.ftype.r <- rseg.ftype[r]
rseg_feature <- RomFeature$new(
ds,
list(hydrocode = rseg.hydrocode.r, ftype = rseg.ftype.r),
TRUE
)
rseg.hydroid.r <- rseg_feature$hydroid
rseg.hydroid.r
model.version.r <- model.version[r]
print(paste("searching", model.version.r,"model for river segment hydroid", rseg.hydroid.r))
model.version.r
rseg.model.r <- RomProperty$new(
ds,
list(entity_type='dh_feature', featureid = rseg.hydroid.r, propcode=model.version.r),
TRUE
)
rseg.model.r
rseg.model.r
rseg.model.r
rseg.model.r
json_obj_url
rseg_obj_url.r <- paste(json_obj_url, rseg.model.r$pid, sep="/")
rseg_model_info.r <- ds$auth_read(rseg_obj_url.r, "text/json", "")
rseg_model_info.r <- fromJSON(rseg_model_info.r)
rseg_model_info.r
runid.r
runid.list
runid.r <- runid.list[r]
runid.r
runid.r
rseg_table.r <- om_model_table(model_info = rseg_model_info.r,
runid.list = runid.r,
metric.list = rseg.metric.list,
include.elfgen = TRUE,
site = site,
site_base = omsite
)
runid.r
rseg_table.r <- om_model_table(model_info = rseg_model_info.r,
runid.list = runid.r,
metric.list = rseg.metric.list,
include.elfgen = TRUE,
site = site,
site_base = omsite
)
rseg_table.r
rseg_table.r
rseg_metrics.df
rseg_metrics.df
r
# print(head(rseg_table.r))
if (r == 1){
rseg_metrics.df <- rseg_table.r
} else {
rseg_metrics.df <- cbind(rseg_metrics.df,rseg_table.r)
}
rseg_metrics.df
rmarkdown::render('C:/Users/nrf46657/Desktop/GitHub/vahydro/R/modeling/hsp2_validation/hsp2_Summary.Rmd',
output_file = 'C:/Users/nrf46657/Desktop/GitHub/plots/TestMarkdownDoc',
params = list(doc_title = "Test HSP2 Model Summary",
rseg.hydrocode = c("JA4_7280_7340","vahydrosw_wshed_JA4_7280_7340"),
rseg.ftype = c("cbp60","vahydro"),
model.version = c("cbp-6.0","vahydro-1.0"),
runid.list = c("hsp2_2022","runid_11")
)
)
rseg_model_info.r
View(rseg.model.r)
View(rseg_model_info.r)
assign("dat_1", rseg_model_info.r)
View(dat_1)
paste0("dat"r,)
(paste0("dat",r)
)
paste0("dat",r)
assign(paste0("dat",r), rseg_model_info.r)
View(dat2)
rmarkdown::render('C:/Users/nrf46657/Desktop/GitHub/vahydro/R/modeling/hsp2_validation/hsp2_Summary.Rmd',
output_file = 'C:/Users/nrf46657/Desktop/GitHub/plots/TestMarkdownDoc',
params = list(doc_title = "Test HSP2 Model Summary",
rseg.hydrocode = c("JA4_7280_7340","vahydrosw_wshed_JA4_7280_7340"),
rseg.ftype = c("cbp60","vahydro"),
model.version = c("cbp-6.0","vahydro-1.0"),
runid.list = c("hsp2_2022","runid_11")
)
)
View(dat1)
View(dat2)
View(dat1)
model.version.r
rmarkdown::render('C:/Users/nrf46657/Desktop/GitHub/HARParchive/HARP-2022-Summer/AutomatedScripts/ws_model_summary.Rmd',
output_file = 'C:/Users/nrf46657/Desktop/GitHub/HARParchive/HARP-2022-Summer/AutomatedScripts',
params = list(doc_title = "Test HSP2 Model Summary",
rseg.hydrocode = c("JA4_7280_7340","vahydrosw_wshed_JA4_7280_7340"),
rseg.ftype = c("cbp60","vahydro"),
model.version = c("cbp-6.0","vahydro-1.0"),
runid.list = c("hsp2_2022","runid_11")
)
)
rmarkdown::render('C:/Users/nrf46657/Desktop/GitHub/HARParchive/HARP-2022-Summer/AutomatedScripts/ws_model_summary.Rmd',
output_file = 'C:/Users/nrf46657/Desktop/GitHub/HARParchive/HARP-2022-Summer/AutomatedScripts',
params = list(doc_title = "Test HSP2 Model Summary",
rseg.hydrocode = c("JA4_7280_7340","vahydrosw_wshed_JA4_7280_7340"),
rseg.ftype = c("cbp60","vahydro"),
rseg.model.version = c("cbp-6.0","vahydro-1.0"),
runid.list = c("hsp2_2022","runid_11")
)
)
rmarkdown::render('C:/Users/nrf46657/Desktop/GitHub/HARParchive/HARP-2022-Summer/AutomatedScripts/ws_model_summary.Rmd',
output_file = 'C:/Users/nrf46657/Desktop/GitHub/HARParchive/HARP-2022-Summer/AutomatedScripts/ws_model_summary_doc',
params = list(doc_title = "Test HSP2 Model Summary",
rseg.hydrocode = c("JA4_7280_7340","vahydrosw_wshed_JA4_7280_7340"),
rseg.ftype = c("cbp60","vahydro"),
rseg.model.version = c("cbp-6.0","vahydro-1.0"),
runid.list = c("hsp2_2022","runid_11")
)
)
rmarkdown::render('C:/Users/nrf46657/Desktop/GitHub/HARParchive/HARP-2022-Summer/AutomatedScripts/ws_model_summary.Rmd',
output_file = 'C:/Users/nrf46657/Desktop/GitHub/HARParchive/HARP-2022-Summer/AutomatedScripts/MarkdownSummaryTest',
params = list(doc_title = "Test HSP2 Model Summary",
rseg.hydrocode = c("JA4_7280_7340","vahydrosw_wshed_JA4_7280_7340"),
rseg.ftype = c("cbp60","vahydro"),
rseg.model.version = c("cbp-6.0","vahydro-1.0"),
runid.list = c("hsp2_2022","runid_11")
)
)
rmarkdown::render('C:/Users/nrf46657/Desktop/GitHub/HARParchive/HARP-2022-Summer/AutomatedScripts/ws_model_summary.Rmd',
output_file = 'C:/Users/nrf46657/Desktop/GitHub/HARParchive/HARP-2022-Summer/AutomatedScripts/MarkdownSummaryTest',
params = list(doc_title = "Test HSP2 Model Summary",
rseg.hydrocode = c("JA4_7280_7340","vahydrosw_wshed_JA4_7280_7340","vahydrosw_wshed_JA4_7280_7340"),
rseg.ftype = c("cbp60","vahydro","vahydro"),
rseg.model.version = c("cbp-6.0","vahydro-1.0","vahydro-1.0"),
runid.list = c("hsp2_2022","runid_11","runid_13")
)
)
basepath='/var/www/R';
source(paste(basepath,'config.R',sep='/'))
ds = RomDataSource$new(site, rest_uname)
ds$get_token(rest_pw)
source(paste(hydro_tools_location,'/R/om_vahydro_metric_grid.R', sep = ''));
# source("https://raw.githubusercontent.com/HARPgroup/hydro-tools/master/GIS_functions/model_geoprocessor.R")
#------------------------------------------
# plotname <- "all"
# segswhere_a <- "hydrocode NOT LIKE '%0000_0000'"
# segswhere_b <- "hydrocode NOT LIKE '%0000_0000'"
# plotname <- "york pamunkey"
# # segswhere_a <- "hydrocode LIKE '%wshed_YP%' AND hydrocode NOT LIKE '%_0000'" # exclude tidal segs
# segswhere_a <- "hydrocode LIKE '%wshed_YP%'"
# segswhere_b <- "hydrocode LIKE 'YP%'"
# plotname <- "york mattaponi"
# segswhere_a <- "hydrocode LIKE '%wshed_YM%'"
# segswhere_b <- "hydrocode LIKE 'YM%'"
# plotname <- "rappahannock"
# segswhere_a <- "hydrocode LIKE '%wshed_R%'"
# segswhere_b <- "hydrocode LIKE 'R%'"
# segswhere_a <- "hydrocode LIKE '%wshed_P%'"
# segswhere_b <- "hydrocode LIKE 'P%'"
# plotname <- "james"
# segswhere_a <- "hydrocode LIKE '%wshed_J%'"
# segswhere_b <- "hydrocode LIKE 'J%'"
plotname <- "potomac"
segswhere_a <- "hydrocode LIKE '%wshed_P%'"
segswhere_b <- "hydrocode LIKE 'P%'"
scenario_a <- list(ftype="vahydro",model_version="vahydro-1.0",runid="runid_11")
scenario_b <- list(ftype="cbp60",model_version="cbp-6.0",runid="hsp2_2022")
# segswhere_b <- "hydrocode LIKE '%wshed_P%'"
# scenario_a <- list(ftype="vahydro",model_version="vahydro-1.0",runid="runid_11")
# scenario_b <- list(ftype="vahydro",model_version="vahydro-1.0",runid="runid_11")
#------------------------------------------
flow_metric <- "Qout"
# flow_metric <- "l90_Qout"
################################################################################
# retrieve segments & metric data
scenario_a_data <- data.frame(
'ftype' = scenario_a$ftype,
'model_version' = scenario_a$model_version,
'runid' = scenario_a$runid,
'metric' = c(flow_metric),
'runlabel' = c(flow_metric)
)
scenario_a_data <- om_vahydro_metric_grid(metric=scenario_a_data$metric,runids=scenario_a_data,ftype = scenario_a_data$ftype,ds = ds)
scenario_b_data <- data.frame(
'ftype' = scenario_b$ftype,
'model_version' = scenario_b$model_version,
'runid' = scenario_b$runid,
'metric' = c(flow_metric),
'runlabel' = c(flow_metric)
)
scenario_b_data <- om_vahydro_metric_grid(metric=scenario_b_data$metric,runids=scenario_b_data,ftype = scenario_b_data$ftype,ds = ds)
watersheds_a <- sqldf(paste0("SELECT * FROM scenario_a_data WHERE ",segswhere_a,";"))
watersheds_b <- sqldf(paste0("SELECT * FROM scenario_b_data WHERE ",segswhere_b,";"))
# generate a color palette of 6 blues from lightcyan to royalblue4
map_cols <- colorRampPalette(c('lightcyan','royalblue4'))(6)
# place rsegs into bins based on metric value
watersheds_b <-sqldf(paste('SELECT *,
CASE
WHEN ',flow_metric,' < ',as.numeric(quantile(watersheds_b[,flow_metric],0.05)),' THEN "',map_cols[1],'"
WHEN ',flow_metric,' BETWEEN ',as.numeric(quantile(watersheds_b[,flow_metric],0.05)),' AND ',as.numeric(quantile(watersheds_b[,flow_metric],0.25)),' THEN "',map_cols[2],'"
WHEN ',flow_metric,' BETWEEN ',as.numeric(quantile(watersheds_b[,flow_metric],0.25)),' AND ',as.numeric(quantile(watersheds_b[,flow_metric],0.50)),' THEN "',map_cols[3],'"
WHEN ',flow_metric,' BETWEEN ',as.numeric(quantile(watersheds_b[,flow_metric],0.50)),' AND ',as.numeric(quantile(watersheds_b[,flow_metric],0.75)),' THEN "',map_cols[4],'"
WHEN ',flow_metric,' BETWEEN ',as.numeric(quantile(watersheds_b[,flow_metric],0.75)),' AND ',as.numeric(quantile(watersheds_b[,flow_metric],0.95)),' THEN "',map_cols[5],'"
WHEN ',flow_metric,' > ',as.numeric(quantile(watersheds_b[,flow_metric],0.95)),' THEN "',map_cols[6],'"
ELSE "#FFFFFF"
END AS color
FROM watersheds_b',sep=""))
################################################################################
################################################################################
# add geom column
# watersheds <- watersheds_b
df_add_geom <- function(watersheds) {
watersheds$geom <- NA
#i<-1
for (i in 1:length(watersheds[,1])){
print(paste(i," in ",length(watersheds[,1])," (",watersheds$hydrocode[i],")",sep=""))
watershed_feature <- RomFeature$new(ds, list(hydroid = watersheds$featureid[i]), TRUE)
watersheds$geom[i] <- watershed_feature$geom
}
return(watersheds)
}
################################################################################
################################################################################
# convert to sp layer
df_to_sp <- function(watersheds) {
print(paste(1," in ",length(watersheds[,1])," (",watersheds$hydrocode[1],")",sep=""))
rsegs_layer_sp <- sp::SpatialPolygonsDataFrame(readWKT(watersheds$geom[1]), data=data.frame(watersheds[1,1:ncol(watersheds)-1]))
#i<-2
for (i in 2:length(watersheds[,1])){
print(paste(i," in ",length(watersheds[,1])," (",watersheds$hydrocode[i],")",sep=""))
rseg_sp <- sp::SpatialPolygonsDataFrame(readWKT(watersheds$geom[i]), data=data.frame(watersheds[i,1:ncol(watersheds)-1]), match.ID = FALSE)
rsegs_layer_sp <- rbind(rsegs_layer_sp, rseg_sp)
}
return(rsegs_layer_sp)
}
################################################################################
################################################################################
polygons_a <- df_to_sp(df_add_geom(watersheds_a))
polygons_b <- df_to_sp(df_add_geom(watersheds_b))
# polygons <- df_to_sp(df_add_geom(watersheds))
################################################################################
################################################################################
# generate basic map
# paste0("Model_Map_",scenario_a$ftype,"-",scenario_a$model_version,"-",scenario_a$runid,"__",scenario_b$ftype,"-",scenario_b$model_version,"-",scenario_b$runid,"_",plotname,".png")
# filename <- paste0("Model_Map_",scenario_a$ftype,"-",scenario_a$model_version,"-",scenario_a$runid,"__",scenario_b$ftype,"-",scenario_b$model_version,"-",scenario_b$runid,"_",plotname,".png")
# png(file=paste(export_path,filename,sep=""), width=1500, height=1500)
# plot(polygons_a, axes = 1, main=paste0(plotname,"\na:",segswhere_a,"   b:",segswhere_b), cex.main=2, cex.axis=2.5, border = "black")
# plot(polygons_b, col = "blue", add = T)
# legend("topleft", legend=c(paste0(scenario_a$ftype,", ",scenario_a$model_version,", ",scenario_a$runid, " (",length(polygons_a),")"),
#                            paste0(scenario_b$ftype,", ",scenario_b$model_version,", ",scenario_b$runid, " (",length(polygons_b),")")), fill = c("white","blue"), cex=3.5)
# dev.off()
################################################################################
################################################################################
# generate color map
filename <- paste0("Model_Map_",scenario_a$ftype,"-",scenario_a$model_version,"-",scenario_a$runid,"__",scenario_b$ftype,"-",scenario_b$model_version,"-",scenario_b$runid,"_",flow_metric,"_",plotname,".png")
png(file=paste(export_path,filename,sep=""), width=1500, height=1500)
plot(polygons_a, axes = 1, main=paste0(plotname,"\na:",segswhere_a,"   b:",segswhere_b), cex.main=2, cex.axis=2.5, border = "black")
plot(polygons_b, col = polygons_b$color, add = T)
legend("topleft", legend=c(paste0(scenario_a$ftype,", ",scenario_a$model_version,", ",scenario_a$runid, " (",length(polygons_a),")"),
paste0(scenario_b$ftype,", ",scenario_b$model_version,", ",scenario_b$runid, " (",length(polygons_b),")")), fill = c("white","royalblue4"), cex=3.5)
legend("topright", legend=c(paste0("0%->5%: ",round(as.numeric(quantile(watersheds_b[,flow_metric],0.0)),0),"-",round(as.numeric(quantile(watersheds_b[,flow_metric],0.05)),0)),
paste0("5%->25%: ",round(as.numeric(quantile(watersheds_b[,flow_metric],0.05)),0),"-",round(as.numeric(quantile(watersheds_b[,flow_metric],0.25)),0)),
paste0("25%->50%: ",round(as.numeric(quantile(watersheds_b[,flow_metric],0.25)),0),"-",round(as.numeric(quantile(watersheds_b[,flow_metric],0.50)),0)),
paste0("50%->75%: ",round(as.numeric(quantile(watersheds_b[,flow_metric],0.50)),0),"-",round(as.numeric(quantile(watersheds_b[,flow_metric],0.75)),0)),
paste0("75%->95%: ",round(as.numeric(quantile(watersheds_b[,flow_metric],0.75)),0),"-",round(as.numeric(quantile(watersheds_b[,flow_metric],0.95)),0)),
paste0("95%->100%: ",round(as.numeric(quantile(watersheds_b[,flow_metric],0.95)),0),"-",round(as.numeric(quantile(watersheds_b[,flow_metric],1)),0))
),
fill = map_cols, cex=2.5,
title = paste0(flow_metric," (cfs)"))
dev.off()
################################################################################
################################################################################
################################################################################
################################################################################
