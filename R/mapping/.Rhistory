double()
install.packages("dataRetrieval")
install.packages("nhdplusTools")
install.packages("sf")
library(ggplot2)
install.packages("ggmap")
install.packages("ggsn")
install.packages("ggspatial")
install.packages("data.table")
install.packages("sp")
()
(
library(dataRetrieval)
library(nhdplusTools)
library(sf)
library(ggplot2)
library(ggmap)
library(ggsn)
library(ggspatial)
library(data.table)
library(sp)
library(hydrotools)
?st_point
source("https://raw.githubusercontent.com/HARPgroup/hydro-tools/master/R/om_vahydro_metric_grid.R")
######################################################################
# process points layer
point_layer =  st_point(c(points$lon[1], points$lat[1]))
class(points)
points$lon
rnorm(2)
points = data.frame(lat = 37.5 + rnorm(5,0,.5), long = -80 + rnorm(5,0,0.5))
points
st_points(c(points$lat,points$long))
st_points(c(points$lat[1],points$long[1]))
st_point(c(points$lat[1],points$long[1]))
class(st_point(c(points$lat[1],points$long[1])))
?st_sfc
?st_crs
st_coordinates(st_point(c(points$lat[1],points$long[1])))
?st_sfc
points_layer <- st_point(c(points$lat[1],points$long[1]))
points_layer
st_sfc(points_layer)
?get_nhdplus
?st_bbox
# function to generate map gg object (should replace hydro-tools/GIS_functions/mapgen.R)
mapgen <- function(start_point = data.frame(lat = 37.2863888889, lon = -80.0758333333, label = "Intake"),
points = data.frame(lat=double(),lon=double(),label=character()),
rsegs_sp) {
######################################################################
# process points layer
point_layer =  st_point(c(points$lon[1], points$lat[1]))
if (length(points[,1]) > 1) {
for (i in 2:length(points[,1])) {
point <- points[i,]
point = st_point(c(point$lon[1], point$lat[1]))
point_layer = c(point_layer, point)
}
}
point_layer = st_sfc(point_layer)
st_crs(point_layer) <- 4326
points_labels <- as.data.frame(sf::st_coordinates(point_layer))
points_labels$NAME <- points$label
######################################################################
# process intake point
start_point_layer <- st_sf(id = 1, geom = st_sfc(st_point(c(start_point$lon, start_point$lat)), crs = 4326))
start_point_labels <- as.data.frame(sf::st_coordinates(start_point_layer))
start_point_labels$NAME <- start_point$label
######################################################################
# process rseg layer
rsegs_sf <- st_as_sf(rsegs_sp)
st_crs(rsegs_sf) <- 4326
rsegs_centroids <- rgeos::gCentroid(rsegs_sp,byid=TRUE)
rsegs_labels <- as.data.frame(sf::st_coordinates(st_as_sf(rsegs_centroids)))
rsegs_labels$NAME <- rsegs_sf$riverseg
rseg_domain <- st_bbox(rsegs_sp)
#***************************
#* Create domain
#***************************
sf_use_s2(FALSE) # switch off Spherical geometry (s2)
out_point = sf::st_sfc(sf::st_point(c(start_point$lon, start_point$lat)), crs = 4326)
nhd_out <- get_nhdplus(out_point)
nhd <- plot_nhdplus(list(nhd_out$comid), actually_plot = FALSE)
domain <- st_buffer(st_as_sfc(st_bbox(rsegs_sf)), .2)
domain  <- plot_nhdplus(bbox = st_bbox(domain), actually_plot = FALSE)
sf_bbox <- st_bbox(domain$flowline)
ggmap_bbox <- setNames(sf_bbox, c("left", "bottom", "right", "top"))
basemap_toner <- get_map(source = "stamen", maptype = "toner", location = ggmap_bbox, zoom = 12)
toner_map <- ggmap(basemap_toner)
######################################################################
# generate map gg object
map_gg <- toner_map +
geom_sf(data = rsegs_sf, inherit.aes = FALSE, color = "black", fill = NA, size = 10) +
geom_sf(data = nhd$flowline,inherit.aes = FALSE,color = "blue", fill = NA, size = 0.5) +
geom_sf(data = domain$network_wtbd,inherit.aes = FALSE,color = "blue", fill = NA, size = 1) +
geom_sf(data = domain$off_network_wtbd,inherit.aes = FALSE,color = "blue", fill = NA, size = 1) +
#geom_sf(data = nhd$catchment,inherit.aes = FALSE,color = "blue", fill = NA, size = 1) +
geom_sf(data = start_point_layer, inherit.aes = FALSE, color = "black", size = 10, pch =18) +
geom_sf(data = point_layer, inherit.aes = FALSE, color = "white", fill = "black", size = 10, pch = 21) +
theme(text = element_text(size = 30),axis.title.x=element_blank(),axis.title.y=element_blank()) +
# plot labels
geom_text(data = rsegs_labels, aes(X, Y, label = NAME), colour = "darkgoldenrod4", size = 8) +
geom_label(data = start_point_labels, aes(X, Y, label = NAME), colour = "black", size = 10, nudge_x = -0.019, nudge_y = 0.006) +
geom_label(data = points_labels, aes(X, Y, label = NAME), colour = "black", size = 10, nudge_x = -0.033, nudge_y = 0.005) +
# scalebar
ggsn::scalebar(nhd$flowline, location = 'bottomleft', dist = 2, dist_unit = 'mi',transform = TRUE, model = 'WGS84',st.bottom=FALSE, st.size=12) +
# north arrow
ggspatial::annotation_north_arrow(which_north = "grid", location = "tr",height = unit(4, "cm"),width = unit(3, "cm"), style = north_arrow_orienteering(text_size = 20))
return(map_gg)
}
# set up your dataframe of points you want displayed on the map (can be gages, intakes, facilities, anything!)
gage_02054530 <- dataRetrieval::readNWISsite("02054530")
gage_02055000 <- dataRetrieval::readNWISsite("02055000")
View(gage_02054530)
# find the watershed outlet.
outlet_point = data.frame(
lat=c(37.221306000000),
lon=c(-77.524348000000),
label=c("Lake Chesdin ARWA")
)
# execute mapgen() function by supplying a starting_point (i.e. intake location) and your points dataframe
# Get all vahydro watersheds
seglist <- ds$get('dh_feature', config=list(ftype='vahydro',bundle='watershed'))
ds <- RomDataSource$new("http://deq1.bse.vt.edu/d.dh", rest_uname)
rest_uname <- FALSE
ds <- RomDataSource$new("http://deq1.bse.vt.edu/d.dh", rest_uname)
class(ds)
?ds
ds
rest_pw <- FALSE
ds$get_token(rest_pw)
rest_uname <- "bbrogan"
rest_pw <- "vikingpichu7"
ds <- RomDataSource$new("http://deq1.bse.vt.edu/d.dh", rest_uname)
ds$get_token(rest_pw)
rm("rest_pw")
rm(rest_uname)
View(gage_02054530)
getwd()
#Load required packages and functions:
library(pander);
library(httr);
library(hydroTSM);
install.packages("hydroTSM")
d
#Input model element ID ad run ID
elid = 339865 # Frederick Co pump-store
runid = 114
# get all data from the run file, keyed by timestamp (at whatever timestep model is run)
dat <- fn_get_runfile(elid, runid)
dat <- fn_get_runfile(elid, runid)
library(hydroTSM);
?fn_get_runfile
rm(list=ls())
