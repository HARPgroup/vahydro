rseg.hydroid <- params$rseg.hydroid
fac.hydroid <- params$fac.hydroid
runid.list <- params$runid.list
fac.metric.list <- params$fac.metric.list
fac_model_pid <- params$fac_model_pid
rseg.metric.list <- params$rseg.metric.list
intake_stats_fid <- params$intake_stats_fid
intake_stats_runid <- params$intake_stats_runid
intake_stats_varname <- params$intake_stats_varname
preferred_runid <- params$preferred_runid
impoundment_fid <- params$impoundment_fid
upstream_rseg_ids <- params$upstream_rseg_ids
downstream_rseg_ids <- params$downstream_rseg_ids
users_metric <- params$users_metric
cu_threshold = params$cu_threshold
cu_pre_var = params$cu_pre_var
cu_post_var = params$cu_post_var
cu_model = params$cu_model
cu_min_valid = params$cu_min_valid
cu_decimals = params$cu_decimals
elfgen = params$elfgen
if (is.logical(intake_stats_fid)) {
intake_stats_fid = fac.hydroid
}
#runid.list <- c('runid_400','runid_600')
#runid.list <- c('runid_201','runid_401')
rlist <- gsub('runid_', '', runid.list)
# SALEM WTP:
# rseg.hydroid <- 68327
# fac.hydroid <- 73112
# runid.list <- c('runid_11','runid_12','runid_13')
#
# fac.metric.list <- c('wd_mgd','ps_mgd','unmet30_mgd')
# rseg.metric.list <- c("Qout","Qbaseline","l30_Qout","l90_Qout","consumptive_use_frac","wd_cumulative_mgd","ps_cumulative_mgd")
#RSEG MODEL INFO
print(paste("searching", site,"for river segment id", rseg.hydroid))
#base_url = site, entity_id = rseg.hydroid
rseg.model <- RomProperty$new(
ds,
list(entity_type='dh_feature', featureid = rseg.hydroid, propcode="vahydro-1.0"),
TRUE
)
rseg_feature <- RomFeature$new(
ds,
list(hydroid = rseg.hydroid),
TRUE
)
#FAC MODEL INFO
if (!is.boolean(fac_model_pid)) {
# this is a feature with multiple models, so we need to specify
fac.model <- RomProperty$new(
ds,
list(pid = fac_model_pid),
TRUE
)
} else {
fac.model <- RomProperty$new(
ds,
list(entity_type='dh_feature', featureid = fac.hydroid, propcode="vahydro-1.0"),
TRUE
)
}
fac_feature <- RomFeature$new(
ds,
list(hydroid = fac.hydroid),
TRUE
)
# need the intake hydroid for this, as there are no facility withdrawals
# only facility children, but we wouldn't want ALL facility children anyhow
annual_use_history <- fac_feature$tsvalues('wd_mgy')
fac.name <- fac_feature$name
if (exists("json_obj_url")) {
fac_obj_url <- paste(json_obj_url, fac.model$pid, sep="/")
fac_model_info <- ds$auth_read(fac_obj_url, "text/json", "")
fac_model_info <- fromJSON(fac_model_info)
fac.elid <- fac_model_info[[1]]$om_element_connection$value
rseg_obj_url <- paste(json_obj_url, rseg.model$pid, sep="/")
rseg_model_info <- ds$auth_read(rseg_obj_url, "text/json", "")
rseg_model_info <- fromJSON(rseg_model_info)
rseg.elid <- rseg_model_info[[1]]$om_element_connection$value
# get report customizations
fac_report_info = find_name(fac_model_info, "reports")
rseg_report_info = find_name(rseg_model_info, "reports")
if (!is.logical(impoundment_fid)) {
imp_model <- RomProperty$new(
ds,
list(entity_type='dh_feature', featureid = impoundment_fid, propcode="vahydro-1.0"),
TRUE
)
imp_obj_url <- paste(json_obj_url, imp_model$pid, sep="/")
imp_model_info <- om_auth_read(imp_obj_url, token,  "text/json", "")
imp_model_info <- fromJSON(imp_model_info)
}
} else {
message("Error: json_obj_url is undefined.  Can not retrieve model and scenario information. (Hint: Use config.R to set json_obj_url) ")
fac_model_info <- list()
rseg_model_info <- list()
}
json_obj_url
fac.model
fac.model$pid
fac_obj_url
fac_model_info
fac_model_info <- ds$auth_read(fac_obj_url, "text/json", "")
fac_model_info
fac_model_info <- fromJSON(fac_model_info)
fac_model_info
ds$auth_read(fac_obj_url, "text/json", "")
auth_read
ds
ds <- RomDataSource$new("http://deq1.bse.vt.edu:81/d.dh", rest_uname)
ds
ds$get_token(rest_pw)
ds
#"runid_201","runid_401","runid_6014","runid_6011","runid_6013","runid_6015","runid_6012"
#https://cran.r-project.org/web/packages/officedown/officedown.pdf
#https://ardata-fr.github.io/officeverse/officedown-for-word.html#insert-sections
knitr::opts_chunk$set(echo = TRUE, fig.cap = TRUE)
library(officedown)
library(officer)
library(flextable)
library(hydrotools)
library(rjson)
library(rapportools)
basepath='/var/www/R'
source('/var/www/R/config.R')
ds <- RomDataSource$new("http://deq1.bse.vt.edu:81/d.dh", rest_uname)
ds$get_token(rest_pw)
source("https://raw.githubusercontent.com/HARPgroup/hydro-tools/master/R/om_cia_table.R") #Used during development
source("https://raw.githubusercontent.com/HARPgroup/hydro-tools/master/R/om_cu_table.R")
source("https://raw.githubusercontent.com/HARPgroup/hydro-tools/master/R/om_demand_table.R") #Used during development
source("https://raw.githubusercontent.com/HARPgroup/hydro-tools/master/VAHydro-2.0/fn_get_prop.R") #Used during development
source("https://raw.githubusercontent.com/HARPgroup/hydro-tools/master/VAHydro-2.0/rest_functions.R") #Used during development
source("https://raw.githubusercontent.com/HARPgroup/hydro-tools/master/VAHydro-2.0/find_name.R") #Used during development
source("https://raw.githubusercontent.com/HARPgroup/hydro-tools/master/R/fac_utils.R") #Used until fac_utils is packaged
# Could also use:
#source("https://raw.githubusercontent.com/HARPgroup/hydro-tools/master/VAHydro-2.0/run_text.R") #Used during development
fp <- fp_par(
text.align = "center",
padding.bottom = 20, padding.top = 120,
border.bottom = fp_border())
ft <- fp_text(shading.color='#EFEFEF', bold = TRUE)
site.plots <- omsite #image files use http
#SPECIFY MODELS AND RUNIDS OF INTEREST
rseg.hydroid <- params$rseg.hydroid
fac.hydroid <- params$fac.hydroid
runid.list <- params$runid.list
fac.metric.list <- params$fac.metric.list
fac_model_pid <- params$fac_model_pid
rseg.metric.list <- params$rseg.metric.list
intake_stats_fid <- params$intake_stats_fid
intake_stats_runid <- params$intake_stats_runid
intake_stats_varname <- params$intake_stats_varname
preferred_runid <- params$preferred_runid
impoundment_fid <- params$impoundment_fid
upstream_rseg_ids <- params$upstream_rseg_ids
downstream_rseg_ids <- params$downstream_rseg_ids
users_metric <- params$users_metric
cu_threshold = params$cu_threshold
cu_pre_var = params$cu_pre_var
cu_post_var = params$cu_post_var
cu_model = params$cu_model
cu_min_valid = params$cu_min_valid
cu_decimals = params$cu_decimals
elfgen = params$elfgen
if (is.logical(intake_stats_fid)) {
intake_stats_fid = fac.hydroid
}
#runid.list <- c('runid_400','runid_600')
#runid.list <- c('runid_201','runid_401')
rlist <- gsub('runid_', '', runid.list)
# SALEM WTP:
# rseg.hydroid <- 68327
# fac.hydroid <- 73112
# runid.list <- c('runid_11','runid_12','runid_13')
#
# fac.metric.list <- c('wd_mgd','ps_mgd','unmet30_mgd')
# rseg.metric.list <- c("Qout","Qbaseline","l30_Qout","l90_Qout","consumptive_use_frac","wd_cumulative_mgd","ps_cumulative_mgd")
#RSEG MODEL INFO
print(paste("searching", site,"for river segment id", rseg.hydroid))
#base_url = site, entity_id = rseg.hydroid
rseg.model <- RomProperty$new(
ds,
list(entity_type='dh_feature', featureid = rseg.hydroid, propcode="vahydro-1.0"),
TRUE
)
rseg_feature <- RomFeature$new(
ds,
list(hydroid = rseg.hydroid),
TRUE
)
#FAC MODEL INFO
if (!is.boolean(fac_model_pid)) {
# this is a feature with multiple models, so we need to specify
fac.model <- RomProperty$new(
ds,
list(pid = fac_model_pid),
TRUE
)
} else {
fac.model <- RomProperty$new(
ds,
list(entity_type='dh_feature', featureid = fac.hydroid, propcode="vahydro-1.0"),
TRUE
)
}
fac_feature <- RomFeature$new(
ds,
list(hydroid = fac.hydroid),
TRUE
)
# need the intake hydroid for this, as there are no facility withdrawals
# only facility children, but we wouldn't want ALL facility children anyhow
annual_use_history <- fac_feature$tsvalues('wd_mgy')
fac.name <- fac_feature$name
if (exists("json_obj_url")) {
fac_obj_url <- paste(json_obj_url, fac.model$pid, sep="/")
fac_model_info <- ds$auth_read(fac_obj_url, "text/json", "")
fac_model_info <- fromJSON(fac_model_info)
fac.elid <- fac_model_info[[1]]$om_element_connection$value
rseg_obj_url <- paste(json_obj_url, rseg.model$pid, sep="/")
rseg_model_info <- ds$auth_read(rseg_obj_url, "text/json", "")
rseg_model_info <- fromJSON(rseg_model_info)
rseg.elid <- rseg_model_info[[1]]$om_element_connection$value
# get report customizations
fac_report_info = find_name(fac_model_info, "reports")
rseg_report_info = find_name(rseg_model_info, "reports")
if (!is.logical(impoundment_fid)) {
imp_model <- RomProperty$new(
ds,
list(entity_type='dh_feature', featureid = impoundment_fid, propcode="vahydro-1.0"),
TRUE
)
imp_obj_url <- paste(json_obj_url, imp_model$pid, sep="/")
imp_model_info <- om_auth_read(imp_obj_url, token,  "text/json", "")
imp_model_info <- fromJSON(imp_model_info)
}
} else {
message("Error: json_obj_url is undefined.  Can not retrieve model and scenario information. (Hint: Use config.R to set json_obj_url) ")
fac_model_info <- list()
rseg_model_info <- list()
}
if (intake_stats_fid == fac.hydroid) {
istats_elid = fac.elid
} else if (intake_stats_fid == rseg.hydroid) {
istats_elid = rseg.elid
} else {
istats_model <- RomProperty$new(
ds,
list(entity_type='dh_feature', featureid = intake_stats_fid, propcode="vahydro-1.0"),
TRUE
)
istats_elid <- as.integer(as.character(istats_model$propvalues('om_element_connection')$propvalue))
}
fac_default_info = list(
model_overview = list(
"value" = "Facility intake model overview not provided."
),
intake_name = list(
"value"  = "un-named intake"
),
project_intro = list(
"value" = "General information about facility & intake (non-model specific)"
)
)
rseg_default_info = list(
model_overview = list(
"value" = "River segment model overview not provided."
)
)
fac_report_info <- merge.list(fac_report_info, fac_default_info)
rseg_report_info <- merge.list(rseg_report_info, rseg_default_info)
# Pre load the output runs so we have them available for later use
# I think the om_get_prop here is no longer needed, rather, we
short_names = list()
run_names = list()
for (i in 1:length(runid.list)){
# get fac model run prop
# get river model run prop
runid.i <- runid.list[i]
run.i <- sub("runid_", "", runid.i)
# TODO: prepopulate runid_XXX$report$facility_default_reports and riverseg_default_reports on the om_model_scenario variable to load as a default for these.  For example, runid11 is *always* the current WSP run, so there should be no need to give it a short name, or scenario name at the individual facility level.
# stash short names since they are used frequently
fac_run_info <- find_name(fac_model_info,runid.i)
f_rep <- find_name(fac_run_info,'reports')
# get the short name
if (is.null(f_rep$scenario_short_name$value)) {
short_names[[runid.i]] <- runid.i
} else {
short_names[[runid.i]] = as.character(f_rep$scenario_short_name$value)
}
# get the long name
if (is.null(f_rep$scenario_name$value)) {
run_names[[runid.i]] <- runid.i
} else {
run_names[[runid.i]] = as.character(f_rep$scenario_name$value)
}
}
rmarkdown::render('C:/Users/nrf46657/Desktop/GitHub/vahydro/R/examples/VWP_CIA_Summary.Rmd',
output_file = 'C:/Users/nrf46657/Desktop/VWP Modeling/City of Salem WTP/2023/May/Salem_TE_217_616_600_regen2023',
params = list(doc_title = "VWP CIA Summary - Salem WTP",
rseg.hydroid = 68327,
fac.hydroid = 73112,
runid.list = c("runid_217","runid_616","runid_600"),
rseg.metric.list = c("Qout","l30_Qout","l90_Qout","consumptive_use_frac",
"wd_cumulative_mgd","ps_cumulative_mgd",
"wd_mgd","ps_mgd"),
intake_stats_runid = 216,
preferred_runid = "runid_600",
upstream_rseg_ids=c(67839,68105,442254,68331),
downstream_rseg_ids=c(68099,68376,68126),
users_metric = "base_demand_mgy")
)
ds
# fig_prop <- find_name(fac_model_info,"fig.location_map")
fig_prop <- om_get_prop(site,fac.model$pid, "dh_properties", "fig.location_map")
site
rmarkdown::render('C:/Users/nrf46657/Desktop/GitHub/vahydro/R/examples/VWP_CIA_Summary.Rmd',
output_file = 'C:/Users/nrf46657/Desktop/VWP Modeling/City of Salem WTP/2023/May/Salem_TE_217_616_600_regen2023',
params = list(doc_title = "VWP CIA Summary - Salem WTP",
rseg.hydroid = 68327,
fac.hydroid = 73112,
runid.list = c("runid_217","runid_616","runid_600"),
rseg.metric.list = c("Qout","l30_Qout","l90_Qout","consumptive_use_frac",
"wd_cumulative_mgd","ps_cumulative_mgd",
"wd_mgd","ps_mgd"),
intake_stats_runid = 216,
preferred_runid = "runid_600",
upstream_rseg_ids=c(67839,68105,442254,68331),
downstream_rseg_ids=c(68099,68376,68126),
users_metric = "base_demand_mgy")
)
library('hydrotools')
library('zoo')
basepath='/var/www/R';
source("/var/www/R/config.R")
################################################################################################
# LOAD MODEL IDs:
rseg_om_id <- 249169 # Roanoke River (Salem)
fac_om_id <- 306768 # Salem WTP:Roanoke River (Salem)
# runid <- 222
runid <- 600
################################################################################################
################################################################################################
rseg_dat <- om_get_rundata(rseg_om_id, runid, site = omsite)
fac_dat <- om_get_rundata(fac_om_id, runid, site = omsite)
rseg_dat_df <- data.frame(rseg_dat)
fac_dat_df <- data.frame(fac_dat)
library('hydrotools')
library('zoo')
basepath='/var/www/R';
source("/var/www/R/config.R")
library('hydrotools')
library('zoo')
basepath='/var/www/R';
source("/var/www/R/config.R")
source("/var/www/R/config.R")
rseg_om_id <- 249169 # Roanoke River (Salem)
fac_om_id <- 306768 # Salem WTP:Roanoke River (Salem)
# runid <- 222
runid <- 600
rseg_dat <- om_get_rundata(rseg_om_id, runid, site = omsite)
fac_dat <- om_get_rundata(fac_om_id, runid, site = omsite)
rseg_dat_df <- data.frame(rseg_dat)
fac_dat_df <- data.frame(fac_dat)
library('hydrotools')
library('zoo')
basepath='/var/www/R';
source("/var/www/R/config.R")
################################################################################################
# LOAD MODEL IDs:
rseg_om_id <- 249169 # Roanoke River (Salem)
fac_om_id <- 306768 # Salem WTP:Roanoke River (Salem)
# runid <- 222
runid <- 600
################################################################################################
################################################################################################
rseg_dat <- om_get_rundata(rseg_om_id, runid, site = omsite)
fac_dat <- om_get_rundata(fac_om_id, runid, site = omsite)
rseg_dat_df <- data.frame(rseg_dat)
fac_dat_df <- data.frame(fac_dat)
rseg_dat_df <- sqldf("SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS 'index', * FROM 'rseg_dat_df'")
fac_dat_df <- sqldf("SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS 'index', * FROM 'fac_dat_df'")
qa <- sqldf("SELECT fac.year,fac.month,fac.day,
fac.Qintake AS fac_Qintake,
fac.Qriver AS fac_Qriver,
fac.Qriver_up AS fac_Qriver_up,
rseg.Qout AS rseg_Qout,
rseg.Qup AS rseg_Qup
FROM fac_dat_df AS fac
LEFT OUTER JOIN 'rseg_dat_df' AS rseg
ON fac.'index' = rseg.'index'
")
View(qa)
qa <- sqldf("SELECT fac.year,fac.month,fac.day,
fac.Qintake AS fac_Qintake,
fac.Qriver_up AS fac_Qriver_up,
rseg.Qout AS rseg_Qout,
rseg.Qup AS rseg_Qup
FROM fac_dat_df AS fac
LEFT OUTER JOIN 'rseg_dat_df' AS rseg
ON fac.'index' = rseg.'index'
")
View(qa)
rmarkdown::render('C:/Users/nrf46657/Desktop/GitHub/vahydro/R/examples/VWP_CIA_Summary.Rmd',
output_file = 'C:/Users/nrf46657/Desktop/VWP Modeling/City of Salem WTP/2023/May/Salem_TE_217_616_600_regen2023',
params = list(doc_title = "VWP CIA Summary - Salem WTP",
rseg.hydroid = 68327,
fac.hydroid = 73112,
runid.list = c("runid_217","runid_616","runid_600"),
rseg.metric.list = c("Qout","l30_Qout","l90_Qout","consumptive_use_frac",
"wd_cumulative_mgd","ps_cumulative_mgd",
"wd_mgd","ps_mgd"),
intake_stats_runid = 216,
preferred_runid = "runid_600",
upstream_rseg_ids=c(67839,68105,442254,68331),
downstream_rseg_ids=c(68099,68376,68126),
users_metric = "base_demand_mgy")
)
rmarkdown::render('/usr/local/home/git/vahydro/R/OWS_summaries/imp_yield.Rmd', output_file = 'C:/Users/nrf46657/Desktop/VWP Modeling/City of Salem WTP/2023/May/salem_cia.docx', params = list( doc_title = 'Scenario Detail – Salem', model_feature = 68327, model_pid = 4713208, scenario = "runid_600", model_version= "vahydro-1.0"))
rmarkdown::render('C:/Users/nrf46657/Desktop/GitHub/vahydro/R/OWS_summaries/imp_yield.Rmd', output_file = 'C:/Users/nrf46657/Desktop/VWP Modeling/City of Salem WTP/2023/May/salem_cia.docx', params = list( doc_title = 'Scenario Detail – Salem', model_feature = 68327, model_pid = 4713208, scenario = "runid_600", model_version= "vahydro-1.0"))
rmarkdown::render('C:/Users/nrf46657/Desktop/GitHub/vahydro/R/OWS_summaries/imp_yield.Rmd', output_file = 'C:/Users/nrf46657/Desktop/VWP Modeling/City of Salem WTP/2023/May/salem_cia.docx', params = list( doc_title = 'Scenario Detail – Salem', model_feature = 68327, model_pid = 4713208, scenario = "runid_600", model_version= "vahydro-1.0"))
rmarkdown::render('C:/Users/nrf46657/Desktop/GitHub/vahydro/R/OWS_summaries/model_run_brief.Rmd', output_file = 'C:/Users/nrf46657/Desktop/VWP Modeling/City of Salem WTP/2023/May/salem_cia.docx', params = list( doc_title = 'Scenario Detail – Salem', model_feature = 68327, model_pid = 4713208, scenario = "runid_600", model_version= "vahydro-1.0"))
rmarkdown::render('C:/Users/nrf46657/Desktop/GitHub/vahydro/R/OWS_summaries/model_run_brief.Rmd', output_file = 'C:/Users/nrf46657/Desktop/VWP Modeling/City of Salem WTP/2023/May/salem_cia.docx', params = list( doc_title = 'Scenario Detail – Salem', model_feature = 68327, model_pid = 4713208, scenario = "runid_600", model_version= "vahydro-1.0"))
rmarkdown::render('C:/Users/nrf46657/Desktop/GitHub/vahydro/R/OWS_summaries/model_run_brief.Rmd', output_file = 'C:/Users/nrf46657/Desktop/VWP Modeling/City of Salem WTP/2023/May/salem_cia.docx', params = list( doc_title = 'Scenario Detail – Salem', model_feature = 68327, model_pid = 4713208, scenario = "runid_600", model_version= "vahydro-1.0"))
rmarkdown::render('C:/Users/nrf46657/Desktop/GitHub/vahydro/R/examples/VWP_CIA_Summary.Rmd',
output_file = 'C:/Users/nrf46657/Desktop/VWP Modeling/City of Salem WTP/2023/May/Salem_TE_regen2023',
params = list(doc_title = "VWP CIA Summary - Salem WTP",
rseg.hydroid = 68327,
fac.hydroid = 73112,
runid.list = c("runid_600","runid_6001"),
rseg.metric.list = c("Qout","l30_Qout","l90_Qout","consumptive_use_frac",
"wd_cumulative_mgd","ps_cumulative_mgd",
"wd_mgd","ps_mgd"),
intake_stats_runid = 216,
preferred_runid = "runid_6001",
upstream_rseg_ids=c(67839,68105,442254,68331),
downstream_rseg_ids=c(68099,68376,68126),
users_metric = "base_demand_mgy")
)
rmarkdown::render('C:/Users/nrf46657/Desktop/GitHub/vahydro/R/examples/VWP_CIA_Summary.Rmd',
output_file = 'C:/Users/nrf46657/Desktop/VWP Modeling/City of Salem WTP/2023/May/Salem_TE_6001_600_regen2023',
params = list(doc_title = "VWP CIA Summary - Salem WTP",
rseg.hydroid = 68327,
fac.hydroid = 73112,
runid.list = c("runid_6001","runid_600"),
rseg.metric.list = c("Qout","l30_Qout","l90_Qout","consumptive_use_frac",
"wd_cumulative_mgd","ps_cumulative_mgd",
"wd_mgd","ps_mgd"),
intake_stats_runid = 216,
preferred_runid = "runid_600",
upstream_rseg_ids=c(67839,68105,442254,68331),
downstream_rseg_ids=c(68099,68376,68126),
users_metric = "base_demand_mgy")
)
rmarkdown::render('C:/Users/nrf46657/Desktop/GitHub/vahydro/R/examples/VWP_CIA_Summary.Rmd',
output_file = 'C:/Users/nrf46657/Desktop/VWP Modeling/City of Salem WTP/2023/May/Salem_TE_400_6001_600_regen2023',
params = list(doc_title = "VWP CIA Summary - Salem WTP",
rseg.hydroid = 68327,
fac.hydroid = 73112,
runid.list = c("runid_400","runid_6001","runid_600"),
rseg.metric.list = c("Qout","l30_Qout","l90_Qout","consumptive_use_frac",
"wd_cumulative_mgd","ps_cumulative_mgd",
"wd_mgd","ps_mgd"),
intake_stats_runid = 216,
preferred_runid = "runid_600",
upstream_rseg_ids=c(67839,68105,442254,68331),
downstream_rseg_ids=c(68099,68376,68126),
users_metric = "base_demand_mgy")
)
library('hydrotools')
library('zoo')
basepath='/var/www/R';
source("/var/www/R/config.R")
################################################################################################
# LOAD MODEL IDs:
rseg_om_id <- 249169 # Roanoke River (Salem)
fac_om_id <- 306768 # Salem WTP:Roanoke River (Salem)
# runid <- 222
# runid <- 600
# runid <- 222
# runid <- 600
runid <- 400
rseg_dat <- om_get_rundata(rseg_om_id, runid, site = omsite)
fac_dat <- om_get_rundata(fac_om_id, runid, site = omsite)
rseg_dat_df <- data.frame(rseg_dat)
fac_dat_df <- data.frame(fac_dat)
rseg_dat_df <- sqldf("SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS 'index', * FROM 'rseg_dat_df'")
fac_dat_df <- sqldf("SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS 'index', * FROM 'fac_dat_df'")
################################################################################################
################################################################################################
sort(colnames(fac_dat_df))
quantile(fac_dat_df$flowby)
quantile(fac_dat_df$flowby_current)
quantile(fac_dat_df$flowby_historic)
quantile(fac_dat_df$flowby_proposed)
fac_dat_df$flowby
rmarkdown::render('C:/Users/nrf46657/Desktop/GitHub/vahydro/R/examples/VWP_CIA_Summary.Rmd',
output_file = 'C:/Users/nrf46657/Desktop/VWP Modeling/City of Salem WTP/2023/May/Salem_TE_400_6001_600_regen2023',
params = list(doc_title = "VWP CIA Summary - Salem WTP",
rseg.hydroid = 68327,
fac.hydroid = 73112,
runid.list = c("runid_400","runid_6001","runid_600"),
rseg.metric.list = c("Qout","l30_Qout","l90_Qout","consumptive_use_frac",
"wd_cumulative_mgd","ps_cumulative_mgd",
"wd_mgd","ps_mgd"),
intake_stats_runid = 216,
preferred_runid = "runid_600",
upstream_rseg_ids=c(67839,68105,442254,68331),
downstream_rseg_ids=c(68099,68376,68126),
users_metric = "base_demand_mgy")
)
