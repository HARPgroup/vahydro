#check whether any hydroids were unmatched
A_not_BB <- sqldf('select * from A where Facility_hydroid NOT IN
(select VAHYDRO_HYDROID from BB)')
#check whether any hydroids were unmatched
A_not_BB <- sqldf('select * from A where VAHYDRO_HYDROID NOT IN
(select Facility_hydroid from BB)')
View(A_not_BB)
#check whether any hydroids were unmatched
A_not_BB <- sqldf('select * from A_Prmt_Ownr where VAHYDRO_HYDROID NOT IN
(select Facility_hydroid from BB)')
A_not_DD <- sqldf('select * from A_Prmt_Ownr where VAHYDRO_HYDROID NOT IN
(select Facility_hydroid from DD)')
View(A_not_DD)
A_not_BD <-  sqldf('select * from A_Prmt_Ownr where VAHYDRO_HYDROID NOT IN
(select Facility_hydroid from DD) AND VAHYDRO_HYDROID NOT IN
(select Facility_hydroid from DD) ')
View(A_not_BD)
B_not_D <- sqldf('select * from BB where Facility_hydroid NOT IN
(select Facility_hydroid from DD)')
D_not_B <- sqldf('select * from DD where Facility_hydroid NOT IN
(select Facility_hydroid from BB)')
View(D_not_B)
View(B_not_D)
PermitList <- ds$auth_read(permit_url, content_type = "text/csv", delim = ",")
#load in OWS Permit List
permit_url <-" https://deq1.bse.vt.edu/d.dh/ows-permit-list?fstatus=All&modified=&startdate_op=%3D&startdate%5Bvalue%5D=&startdate%5Bmin%5D=&startdate%5Bmax%5D=&permit_id_value_op=%3D&permit_id_value=&dh_link_admin_reg_issuer_target_id_op=in&dh_link_admin_reg_issuer_target_id%5B%5D=65668&dh_link_admin_reg_issuer_target_id%5B%5D=91200&sort_by=enddate&sort_order=ASC"
PermitList <- ds$auth_read(permit_url, content_type = "text/csv", delim = ",")
#load in OWS Permit List
permit_url <-"https://deq1.bse.vt.edu/d.dh/ows-permit-list?fstatus=All&modified=&startdate_op=%3D&startdate%5Bvalue%5D=&startdate%5Bmin%5D=&startdate%5Bmax%5D=&permit_id_value_op=%3D&permit_id_value=&dh_link_admin_reg_issuer_target_id_op=in&dh_link_admin_reg_issuer_target_id%5B%5D=65668&dh_link_admin_reg_issuer_target_id%5B%5D=91200&sort_by=enddate&sort_order=ASC"
PermitList <- ds$auth_read(permit_url, content_type = "text/csv", delim = ",")
#load in foundation data from Annual Map Exports EXPANDED view which includes organizations and permits
exp_url <- paste0(site,"ows-awrr-map-export-expanded/wd_mgy?ftype_op=%3D&ftype=&tstime_op=between&tstime%5Bvalue%5D=&tstime%5Bmin%5D=",startdate,"&tstime%5Bmax%5D=",enddate,"&bundle%5B0%5D=well&bundle%5B1%5D=intake&hydroid=")
Exp <- ds$auth_read(exp_url, content_type = "text/csv", delim = ",")
readClipboard()
C <- read.csv("C:\\Users\\rnv55934\\Downloads\\ows_permit_list.csv") #includes permit number and owner
names(C)
CC <- ('SELECT "VA.Hydro.Facility.ID" as Facility_hydroid, Owner, "Permit.ID" as PermitID
FROM C
Group By "VA.Hydro.Facility.ID" ')
CC <- sqldf('SELECT "VA.Hydro.Facility.ID" as Facility_hydroid, Owner, "Permit.ID" as PermitID
FROM C
Group By "VA.Hydro.Facility.ID" ')
#join A to Permit and Owner
A_Prmt_Ownr1 <- sqldf('SELECT a.*, b.Owner, b.PermitID
FROM A_ut_5ya a
LEFT JOIN CC b
ON a.VAHYDRO_HYDROID = b.Facility_hydroid')
#check whether any hydroids were unmatched
A_not_BB <- sqldf('select * from A_Prmt_Ownr1 where VAHYDRO_HYDROID NOT IN
(select Facility_hydroid from BB)')
A_not_DD <- sqldf('select * from A_Prmt_Ownr1 where VAHYDRO_HYDROID NOT IN
(select Facility_hydroid from DD)')
A_not_BD <- sqldf('select * from A_Prmt_Ownr1 where VAHYDRO_HYDROID NOT IN
(select Facility_hydroid from DD) AND VAHYDRO_HYDROID NOT IN
(select Facility_hydroid from DD) ')
B_not_C <- sqldf('select * from BB where Facility_hydroid NOT IN
(select Facility_hydroid from CC)')
C_not_B <- sqldf('select * from CC where Facility_hydroid NOT IN
(select Facility_hydroid from BB)')
View(C_not_B)
whichmatter <- sqldf('select * from A_Prmt_Ownr1 where VAHYDRO_HYDROID IN
(select Facility_hydroid from C_not_B)')
export_path
#when ready
export_path <- "C:/Users/rnv55934/Documents/Docs/Misc/Tasks Misc"
write.csv(A_Prmt_Ownr1,export_path,row.names = F)
#when ready
export_path <- "C:/Users/rnv55934/Documents/Docs/Misc/Tasks Misc/"
write.csv(A_Prmt_Ownr1,paste0(export_path,"A_Prmt_Ownr1.csv"),row.names = F)
View(C)
View(ut_5ya)
#load in OWS Permit List
permit_url <-"https://deq1.bse.vt.edu/d.dh/ows-awrr-map-export-expanded/wd_mgy?ftype_op=%3D&ftype=&tstime_op=between&tstime%5Bvalue%5D=&tstime%5Bmin%5D=2020-01-01&tstime%5Bmax%5D=2020-12-31&bundle%5B0%5D=well&bundle%5B1%5D=intake&hydroid="#"https://deq1.bse.vt.edu/d.dh/ows-permit-list?fstatus=All&modified=&startdate_op=%3D&startdate%5Bvalue%5D=&startdate%5Bmin%5D=&startdate%5Bmax%5D=&permit_id_value_op=%3D&permit_id_value=&dh_link_admin_reg_issuer_target_id_op=in&dh_link_admin_reg_issuer_target_id%5B%5D=65668&dh_link_admin_reg_issuer_target_id%5B%5D=91200&sort_by=enddate&sort_order=ASC"
PermitList <- ds$auth_read(permit_url, content_type = "text/csv", delim = ",")
site
#load in OWS Permit List
permit_url <-paste0(site,"ows-awrr-map-export-expanded/wd_mgy?ftype_op=%3D&ftype=&tstime_op=between&tstime%5Bvalue%5D=&tstime%5Bmin%5D=2020-01-01&tstime%5Bmax%5D=2020-12-31&bundle%5B0%5D=well&bundle%5B1%5D=intake&hydroid=")#"https://deq1.bse.vt.edu/d.dh/ows-permit-list?fstatus=All&modified=&startdate_op=%3D&startdate%5Bvalue%5D=&startdate%5Bmin%5D=&startdate%5Bmax%5D=&permit_id_value_op=%3D&permit_id_value=&dh_link_admin_reg_issuer_target_id_op=in&dh_link_admin_reg_issuer_target_id%5B%5D=65668&dh_link_admin_reg_issuer_target_id%5B%5D=91200&sort_by=enddate&sort_order=ASC"
PermitList <- ds$auth_read(permit_url, content_type = "text/csv", delim = ",")
#calculate Five Year Avg
five_yr_avg <- round((rowMeans(BB[3:7], na.rm = TRUE, dims = 1)),2)
ut_5ya <- cbind(BB, five_yr_avg)
#join A to Use Type and Five Year Avg
A_ut_5ya <- sqldf('SELECT a.*, b.Use_Type, b.five_yr_avg
FROM A a
LEFT JOIN ut_5ya b
ON a.VAHYDRO_HYDROID = b.Facility_hydroid')
#join A to Permit and Owner
A_Prmt_Ownr1 <- sqldf('SELECT a.*, b.Owner, b.PermitID
FROM A_ut_5ya a
LEFT JOIN CC b
ON a.VAHYDRO_HYDROID = b.Facility_hydroid')
#join A to Permit and Owner
A_Prmt_Ownr2 <- sqldf('SELECT a.*, b.PermitID, b.Owner
FROM A_ut_5ya a
LEFT JOIN DD b
ON a.VAHYDRO_HYDROID = b.Facility_hydroid')
#check whether any hydroids were unmatched
A_not_BB <- sqldf('select * from A_Prmt_Ownr1 where VAHYDRO_HYDROID NOT IN
(select Facility_hydroid from BB)')
A_not_DD <- sqldf('select * from A_Prmt_Ownr1 where VAHYDRO_HYDROID NOT IN
(select Facility_hydroid from DD)')
A_not_BD <- sqldf('select * from A_Prmt_Ownr1 where VAHYDRO_HYDROID NOT IN
(select Facility_hydroid from DD) AND VAHYDRO_HYDROID NOT IN
(select Facility_hydroid from DD) ')
#B_not_C <- sqldf('select * from BB where Facility_hydroid NOT IN
#                 (select Facility_hydroid from CC)')
C_not_B <- sqldf('select * from CC where Facility_hydroid NOT IN
(select Facility_hydroid from BB)')
whichmatter <- sqldf('select * from A_Prmt_Ownr1 where VAHYDRO_HYDROID IN
(select Facility_hydroid from C_not_B)')
B_not_D <- sqldf('select * from BB where Facility_hydroid NOT IN
(select Facility_hydroid from DD)')
D_not_B <- sqldf('select * from DD where Facility_hydroid NOT IN
(select Facility_hydroid from BB)')
#calculate Five Year Avg
five_yr_avg <- round((rowMeans(BB[3:7], na.rm = TRUE, dims = 1)),2)
ut_5ya <- cbind(BB, five_yr_avg)
five_yr_avg <- round((rowMeans(BB[3:7], na.rm = FALSE, dims = 1)),2)
ut_5ya <- cbind(BB, five_yr_avg)
#calculate Five Year Avg
five_yr_avg <- round((rowMeans(BB[3:7], na.rm = TRUE, dims = 1)),2)
ut_5ya <- cbind(BB, five_yr_avg)
kable(cat_table, booktabs = T) %>%
kable_styling(latex_options = c("striped", "scale_down")) %>%
column_spec(8, width = "5em") %>%
column_spec(9, width = "5em") %>%
)
kable(cat_table, booktabs = T) %>%
kable_styling(latex_options = c("striped", "scale_down")) %>%
column_spec(8, width = "5em") %>%
column_spec(9, width = "5em")
library("dplyr")
library('httr')
library('stringr')
library("kableExtra")
kable(cat_table, booktabs = T) %>%
kable_styling(latex_options = c("striped", "scale_down")) %>%
column_spec(8, width = "5em") %>%
column_spec(9, width = "5em")
require("dplyr")
require('httr')
require("sqldf")
#----------------------------------------------
# USER INPUTS
#
basepath <- 'http://deq2.bse.vt.edu/d.dh/'
basepath
library('tidyverse') #loads in tidyr, dplyr, ggplot2, etc
library('httr')
library('stringr')
library("kableExtra")
library('stringr')
library('sqldf')
library("hydrotools")
library("RCurl")
options(scipen = 999)
#NOTE: The start and end year need to be updated every year
syear = 1982
eyear = 2021
#NOTE: switch between file types to save in common drive folder; html or latex
#file_extension <- ".html"
file_extension <- ".tex"
#Generate REST token for authentication --------------------------------------------
rest_uname = FALSE
rest_pw = FALSE
basepath ='/var/www/R'
source(paste0(basepath,'/auth.private'))
source(paste0(basepath,'/config.R'))
# ds <- RomDataSource$new(site)
# ds$get_token()
ds <- RomDataSource$new("http://deq1.bse.vt.edu/d.dh", rest_uname)
ds$get_token(rest_pw)
#also, line 111, changed to mp_all_power. Not sure what MayQA section does. Also (eyear-4) in line 189/190
export_path <- "U:/OWS/foundation_datasets/awrr/"
# Annual Reporting PART 1 - Load and save the foundational datasets --------------------------------------------
# MUST BE ON VPN
# This script generates:
#### mp_all_XXXX-XXXX
#### mp_all_1982-current
#### mp_all_wide_XXXX-XXXX
#### mp_permitted_XXXX
library('tidyverse') #loads in tidyr, dplyr, ggplot2, etc
library('httr')
library('stringr')
library("kableExtra")
library('stringr')
library('sqldf')
library("hydrotools")
library("RCurl")
options(scipen = 999)
#NOTE: The start and end year need to be updated every year
syear = 1982
eyear = 2021
#NOTE: switch between file types to save in common drive folder; html or latex
#file_extension <- ".html"
file_extension <- ".tex"
# Annual Reporting PART 1 - Load and save the foundational datasets --------------------------------------------
# MUST BE ON VPN
# This script generates:
#### mp_all_XXXX-XXXX
#### mp_all_1982-current
#### mp_all_wide_XXXX-XXXX
#### mp_permitted_XXXX
library('tidyverse') #loads in tidyr, dplyr, ggplot2, etc
library('httr')
library('stringr')
library("kableExtra")
library('stringr')
library('sqldf')
library("hydrotools")
library("RCurl")
options(scipen = 999)
#NOTE: The start and end year need to be updated every year
# syear = 1982
syear = 2020
eyear = 2021
#NOTE: switch between file types to save in common drive folder; html or latex
#file_extension <- ".html"
file_extension <- ".tex"
rest_uname = FALSE
rest_pw = FALSE
basepath ='/var/www/R'
source(paste0(basepath,'/auth.private'))
source(paste0(basepath,'/config.R'))
source(paste0(basepath,'config.R'))
source(paste0(basepath,'auth.private'))
source(paste0(basepath,'/auth.private'))
rest_uname
# ds <- RomDataSource$new(site)
# ds$get_token()
ds <- RomDataSource$new("http://deq1.bse.vt.edu/d.dh", rest_uname)
ds$get_token(rest_pw)
source(paste0(basepath,'/auth.private'))
source(paste0(basepath,'/config.R'))
basepath
library('tidyverse') #loads in tidyr, dplyr, ggplot2, etc
library('httr')
library('stringr')
library("kableExtra")
library('stringr')
library('sqldf')
library("hydrotools")
library("RCurl")
options(scipen = 999)
#NOTE: The start and end year need to be updated every year
# syear = 1982
syear = 2020
eyear = 2021
#NOTE: switch between file types to save in common drive folder; html or latex
#file_extension <- ".html"
file_extension <- ".tex"
rest_uname = FALSE
rest_pw = FALSE
# basepath ='/var/www/R'
basepath ="http://deq1.bse.vt.edu/d.dh"
source(paste0(basepath,'/auth.private'))
basepath ='/var/www/R'
source(paste0(basepath,'/auth.private'))
basepath ="http://deq1.bse.vt.edu/d.dh"
source(paste0(basepath,'/config.R'))
source(paste0(basepath,'/config.R'))
basepath ='/var/www/R'
source(paste0(basepath,'/auth.private'))
source(paste0(basepath,'/config.R'))
basepath='/var/www/R';
source("/var/www/R/config.R")
rest_pw
# Annual Reporting PART 1 - Load and save the foundational datasets --------------------------------------------
# MUST BE ON VPN
# This script generates:
#### mp_all_XXXX-XXXX
#### mp_all_1982-current
#### mp_all_wide_XXXX-XXXX
#### mp_permitted_XXXX
library('tidyverse') #loads in tidyr, dplyr, ggplot2, etc
library('httr')
library('stringr')
library("kableExtra")
library('stringr')
library('sqldf')
library("hydrotools")
library("RCurl")
options(scipen = 999)
#NOTE: The start and end year need to be updated every year
# syear = 1982
syear = 2020
eyear = 2021
#NOTE: switch between file types to save in common drive folder; html or latex
#file_extension <- ".html"
file_extension <- ".tex"
rest_uname = FALSE
rest_pw = FALSE
basepath ='/var/www/R'
source(paste0(basepath,'/auth.private'))
source(paste0(basepath,'/config.R'))
ds <- RomDataSource$new("http://deq1.bse.vt.edu/d.dh", rest_uname)
ds$get_token(rest_pw)
export_path <- "U:/OWS/foundation_datasets/awrr/"
# export_path <- "U:/OWS/foundation_datasets/awrr/"
export_path <- "C:/Users/nrf46657/Desktop/DEQ_new/CEDS Migration/"
if (file_extension == ".html") {
options(knitr.table.format = "html") #"html" for viewing in Rstudio Viewer pane
file_ext <- ".html" #view in R or browser
} else {
options(knitr.table.format = "latex") #"latex" when ready to output to Overleaf
file_ext <- ".tex" #for easy upload to Overleaf
}
#Kable Styling
latexoptions <- c("scale_down")
year.range <- (eyear-4):eyear
#Join in FIPS name to data
#fips <- read.csv(file = paste0(github_location,"/vahydro/R/wsp/wsp2020/FoundationDataset/fips_codes.csv"))
#GM correct 'county' / 'city of' naming convention
fips <- read.csv(file = "U:\\OWS\\Report Development\\Annual Water Resources Report\\October 2022 Report\\fips_codes_propernames.csv")
View(fips)
############### PULL DIRECTLY FROM VAHYDRO ###################################################
#load in MGY from Annual Map Exports view
tsdef_url <- paste0(site,"ows-awrr-map-export/wd_mgy?ftype_op=%3D&ftype=&tstime_op=between&tstime%5Bvalue%5D=&tstime%5Bmin%5D=1982-01-01&tstime%5Bmax%5D=",eyear,"-12-31&bundle%5B0%5D=well&bundle%5B1%5D=intake")
tsdef_url
#NOTE: this takes 5-8 minutes (grab a snack; stay hydrated)
multi_yr_data <- ds$auth_read(tsdef_url, content_type = "text/csv", delim = ",")
View(multi_yr_data)
library("dplyr")
library('httr')
library('stringr')
library("kableExtra")
a <- c(
'agricultural',
'commercial',
'irrigation',
'manufacturing',
'mining',
'municipal'
)
b <- c('Groundwater', 'Surface Water', 'Total (GW + SW)')
cat_table<- data.frame(expand.grid(a,b))
colnames(cat_table) <- c('Use_Type', 'Source_Type')
cat_table <- arrange(cat_table, Source_Type, Use_Type )
#cat_table = FALSE
syear = 2016
# syear = 2020
eyear = 2020
year.range <- syear:eyear
y <- 2020
for (y in year.range) {
print(y)
startdate <- paste(y, "-01-01",sep='')
enddate <- paste(y, "-12-31", sep='')
localpath <- tempdir()
filename <- paste("data.all_",y,".csv",sep="")
destfile <- paste(localpath,filename,sep="\\")
download.file(paste("https://deq1.bse.vt.edu/d.dh/ows-awrr-map-export/wd_mgy?ftype_op=not&ftype=power&tstime_op=between&tstime%5Bvalue%5D=&tstime%5Bmin%5D=",startdate,"&tstime%5Bmax%5D=",enddate,"&bundle%5B0%5D=well&bundle%5B1%5D=intake&dh_link_admin_reg_issuer_target_id%5B0%5D=65668&dh_link_admin_reg_issuer_target_id%5B1%5D=91200&dh_link_admin_reg_issuer_target_id%5B2%5D=77498",sep=""), destfile = destfile, method = "libcurl")
data.all <- read.csv(file=paste(localpath , filename,sep="\\"), header=TRUE, sep=",")
#has 3 issuing authorities, does not include power
#  data.all <- read.csv(file=paste("http://deq2.bse.vt.edu/d.dh/ows-awrr-map-export/wd_mgy?ftype_op=not&ftype=power&tstime_op=between&tstime%5Bvalue%5D=&tstime%5Bmin%5D=",startdate,"&tstime%5Bmax%5D=",enddate,"&bundle%5B0%5D=well&bundle%5B1%5D=intake&dh_link_admin_reg_issuer_target_id%5B0%5D=65668&dh_link_admin_reg_issuer_target_id%5B1%5D=91200&dh_link_admin_reg_issuer_target_id%5B2%5D=77498",sep=""), header=TRUE, sep=",")
data <- data.all
#remove duplicates (keeps one row)
data <- distinct(data, MP_hydroid, .keep_all = TRUE)
#exclude dalecarlia
data <- data[-which(data$Facility=='DALECARLIA WTP'),]
if (length(which(data$Use.Type=='facility')) > 0) {
data <- data[-which(data$Use.Type=='facility'),]
}
#rename columns
# colnames(data) <- c('HydroID', 'Hydrocode', 'Source_Type',
#                     'MP_Name', 'Facility', 'Use_Type', 'Year',
#                     'mgy', 'mgd', 'lat', 'lon', 'locality')
colnames(data) <- c('HydroID',
'Hydrocode',
'Source_Type',
'MP_Name',
'Facility_HydroID',
'Facility',
'Use_Type',
'Year',
'mgy',
'mgd',
'lat',
'lon',
'FIPS',
'locality')
data$mgd <- data$mgd/365
#make use type values lowercase
data$Use_Type <- str_to_lower(data$Use_Type)
#change 'Well' and 'Surface Water Intake' values in source_type column to match report headers
levels(data$Source_Type) <- c(levels(data$Source_Type), "Groundwater", "Surface Water")
data$Source_Type[data$Source_Type == 'Well'] <- 'Groundwater'
data$Source_Type[data$Source_Type == 'Surface Water Intake'] <- 'Surface Water'
data$Use_Type[data$Use_Type == 'industrial'] <- 'manufacturing'
# rename NA columns if any (required prior to next step)
names(data)[which(names(data)%in%c(NA))] <- "NA"
catsourcesum <- data %>% group_by(Use_Type, Source_Type)
catsourcesum <- catsourcesum %>% summarise(
mgd = sum(mgd),
mgy = sum(mgy)
)
# 11.29.22: need to remove empty row 1
catsourcesum <- catsourcesum[-1,]
catsourcesum$mgd = round(catsourcesum$mgy / 365.0,2)
catsourcesum <- arrange(catsourcesum, Source_Type, Use_Type)
catsum <- catsourcesum
catsum$Source_Type <- "Total (GW + SW)"
catsum <- catsum %>% group_by(Use_Type, Source_Type)
catsum <- catsum %>% summarise(
mgd = sum(mgd),
mgy = sum(mgy)
)
catsum <- arrange(catsum, Source_Type, Use_Type)
year_table <- rbind(catsourcesum, catsum)
year_table <- arrange(year_table, Source_Type, Use_Type)
assign(paste("y", y, sep=''), year_table)
if (is.logical(cat_table)) {
cat_table = year_table[,1:3]
} else {
cat_table <- cbind(cat_table, year_table[,3])
}
}
library("dplyr")
library('httr')
library('stringr')
library("kableExtra")
a <- c(
'agricultural',
'commercial',
'irrigation',
'manufacturing',
'mining',
'municipal'
)
b <- c('Groundwater', 'Surface Water', 'Total (GW + SW)')
cat_table<- data.frame(expand.grid(a,b))
colnames(cat_table) <- c('Use_Type', 'Source_Type')
cat_table <- arrange(cat_table, Source_Type, Use_Type )
#cat_table = FALSE
syear = 2016
# syear = 2020
eyear = 2020
year.range <- syear:eyear
for (y in year.range) {
print(y)
startdate <- paste(y, "-01-01",sep='')
enddate <- paste(y, "-12-31", sep='')
localpath <- tempdir()
filename <- paste("data.all_",y,".csv",sep="")
destfile <- paste(localpath,filename,sep="\\")
download.file(paste("https://deq1.bse.vt.edu/d.dh/ows-awrr-map-export/wd_mgy?ftype_op=not&ftype=power&tstime_op=between&tstime%5Bvalue%5D=&tstime%5Bmin%5D=",startdate,"&tstime%5Bmax%5D=",enddate,"&bundle%5B0%5D=well&bundle%5B1%5D=intake&dh_link_admin_reg_issuer_target_id%5B0%5D=65668&dh_link_admin_reg_issuer_target_id%5B1%5D=91200&dh_link_admin_reg_issuer_target_id%5B2%5D=77498",sep=""), destfile = destfile, method = "libcurl")
data.all <- read.csv(file=paste(localpath , filename,sep="\\"), header=TRUE, sep=",")
#has 3 issuing authorities, does not include power
#  data.all <- read.csv(file=paste("http://deq2.bse.vt.edu/d.dh/ows-awrr-map-export/wd_mgy?ftype_op=not&ftype=power&tstime_op=between&tstime%5Bvalue%5D=&tstime%5Bmin%5D=",startdate,"&tstime%5Bmax%5D=",enddate,"&bundle%5B0%5D=well&bundle%5B1%5D=intake&dh_link_admin_reg_issuer_target_id%5B0%5D=65668&dh_link_admin_reg_issuer_target_id%5B1%5D=91200&dh_link_admin_reg_issuer_target_id%5B2%5D=77498",sep=""), header=TRUE, sep=",")
data <- data.all
#remove duplicates (keeps one row)
data <- distinct(data, MP_hydroid, .keep_all = TRUE)
#exclude dalecarlia
data <- data[-which(data$Facility=='DALECARLIA WTP'),]
if (length(which(data$Use.Type=='facility')) > 0) {
data <- data[-which(data$Use.Type=='facility'),]
}
#rename columns
# colnames(data) <- c('HydroID', 'Hydrocode', 'Source_Type',
#                     'MP_Name', 'Facility', 'Use_Type', 'Year',
#                     'mgy', 'mgd', 'lat', 'lon', 'locality')
colnames(data) <- c('HydroID',
'Hydrocode',
'Source_Type',
'MP_Name',
'Facility_HydroID',
'Facility',
'Use_Type',
'Year',
'mgy',
'mgd',
'lat',
'lon',
'FIPS',
'locality')
data$mgd <- data$mgd/365
#make use type values lowercase
data$Use_Type <- str_to_lower(data$Use_Type)
#change 'Well' and 'Surface Water Intake' values in source_type column to match report headers
levels(data$Source_Type) <- c(levels(data$Source_Type), "Groundwater", "Surface Water")
data$Source_Type[data$Source_Type == 'Well'] <- 'Groundwater'
data$Source_Type[data$Source_Type == 'Surface Water Intake'] <- 'Surface Water'
data$Use_Type[data$Use_Type == 'industrial'] <- 'manufacturing'
# rename NA columns if any (required prior to next step)
names(data)[which(names(data)%in%c(NA))] <- "NA"
catsourcesum <- data %>% group_by(Use_Type, Source_Type)
catsourcesum <- catsourcesum %>% summarise(
mgd = sum(mgd),
mgy = sum(mgy)
)
# 11.29.22: need to remove empty row 1
catsourcesum <- catsourcesum[-1,]
catsourcesum$mgd = round(catsourcesum$mgy / 365.0,2)
catsourcesum <- arrange(catsourcesum, Source_Type, Use_Type)
catsum <- catsourcesum
catsum$Source_Type <- "Total (GW + SW)"
catsum <- catsum %>% group_by(Use_Type, Source_Type)
catsum <- catsum %>% summarise(
mgd = sum(mgd),
mgy = sum(mgy)
)
catsum <- arrange(catsum, Source_Type, Use_Type)
year_table <- rbind(catsourcesum, catsum)
year_table <- arrange(year_table, Source_Type, Use_Type)
assign(paste("y", y, sep=''), year_table)
if (is.logical(cat_table)) {
cat_table = year_table[,1:3]
} else {
cat_table <- cbind(cat_table, year_table[,3])
}
}
View(cat_table)
