# print(fname)
# ggsave(fname,width=7,height=4.75)
#
##### Naming for saving and posting to VAHydro
# print(paste("Saved file: ", fname, "with URL", furl))
#
# vahydro_post_metric_to_scenprop(scenprop$pid, 'dh_image_file', furl, 'fig.30daymax_unmet', 0.0, ds)
##### HEATMAP
# includes code needed for both the heatmap with counts and heatmap with counts and averages
# Uses dat2 for heatmap calendar years
# make numeric versions of syear and eyear
num_syear <- as.numeric(syear) + 1
num_eyear <- as.numeric(eyear)
mode(yrdat) <- 'numeric'
yrdatdf <- as.data.frame(yrdat)
#ADD FINAL UNMET COLUMN
#######################################################
yrdatdf <- sqldf("select *,
CASE WHEN (unmet_demand_mgd - (2.6 - gw_demand_mgd) < 1) THEN 0
ELSE unmet_demand_mgd - (2.6 - gw_demand_mgd)
END AS final_unmet_demand_mgd
from yrdatdf")
#colnames(yrdatdf)
#######################################################
# FOR QA PURPOSES ONLY
yrdatdf_qa <- sqldf("select *
from yrdatdf
WHERE year = 2001 AND month = 10
")
#######################################################
# yrmodat <- sqldf("SELECT month months,
#                         year years,
#                         sum(unmet_demand_mgd) sum_unmet,
#                         count(*) count
#                   FROM yrdatdf
#                   WHERE unmet_demand_mgd > 0
#                   GROUP BY month, year") #Counts sum of unmet_days by month and year
#NEW VERSION -> USING FINAL UNMET DEMAND
yrmodat <- sqldf("SELECT month months,
year years,
sum(final_unmet_demand_mgd) sum_unmet,
count(*) count
FROM yrdatdf
WHERE final_unmet_demand_mgd > 0
GROUP BY month, year") #Counts sum of unmet_days by month and year
#converts unmet_mgd sums to averages for cells
yrmodat$avg_unmet <- yrmodat$sum_unmet / yrmodat$count
#Join counts with original data frame to get missing month and year combos then selects just count month and year
yrmodat <- sqldf("SELECT * FROM yrdatdf LEFT JOIN yrmodat ON yrmodat.years = yrdatdf.year AND yrmodat.months = yrdatdf.month group by month, year")
yrmodat <- sqldf('SELECT month, year, avg_unmet, count count_unmet_days FROM yrmodat GROUP BY month, year')
#Replace NA for count with 0s
yrmodat[is.na(yrmodat)] = 0
########################################################### Calculating Totals
# monthly totals via sqldf
mosum <- sqldf("SELECT  month, sum(count_unmet_days) count_unmet_days FROM yrmodat GROUP BY month")
mosum$year <- rep(num_eyear+1,12)
#JK addition 3/25/22: Cell of total days unmet in simulation period
total_unmet_days <- sum(yrmodat$count_unmet_days)
total_unmet_days_cell <- data.frame("month" = 13,
"count_unmet_days" = as.numeric(total_unmet_days),
"year" = num_eyear+1)
#yearly sum
yesum <-  sqldf("SELECT year, sum(count_unmet_days) count_unmet_days FROM yrmodat GROUP BY year")
yesum$month <- rep(13,length(yesum$year))
# yesum <- rbind(yesum,data.frame(year = "Total",
#                                 count_unmet_days = 999,
#                                 month = 13))
# create monthly averages
moavg<- sqldf('SELECT * FROM mosum')
moavg$year <- moavg$year + 1
moavg$avg <- round(moavg$count_unmet_days/((num_eyear-num_syear)+1),1)
# create yearly averages
yeavg<- sqldf('SELECT * FROM yesum')
yeavg$month <- yeavg$month + 1
yeavg$avg <- round(yeavg$count_unmet_days/12,1)
# create x and y axis breaks
y_breaks <- seq(syear,num_eyear+2,1)
x_breaks <- seq(1,14,1)
# create x and y labels
y_labs <- c(seq(syear,eyear,1),'Totals', 'Avg')
x_labs <- c(month.abb,'Totals','Avg')
############################################################### Plot and Save count heatmap
# If loop makes sure plots are green if there is no unmet demand
if (sum(mosum$count_unmet_days) == 0) {
count_grid <- ggplot() +
geom_tile(data=yrmodat, color='black',aes(x = month, y = year, fill = count_unmet_days)) +
geom_text(aes(label=yrmodat$count_unmet_days, x=yrmodat$month, y= yrmodat$year), size = 3.5, colour = "black") +
scale_fill_gradient2(low = "#00cc00", mid= "#00cc00", high = "#00cc00", guide = "colourbar",
name= 'Unmet Days') +
theme(panel.background = element_rect(fill = "transparent"))+
theme() + labs(title = 'Unmet Demand Heatmap', y=NULL, x=NULL) +
scale_x_continuous(expand=c(0,0), breaks= x_breaks, labels=x_labs, position='top') +
scale_y_reverse(expand=c(0,0), breaks=y_breaks, labels= y_labs) +
theme(axis.ticks= element_blank()) +
theme(plot.title = element_text(size = 12, face = "bold",  hjust = 0.5)) +
theme(legend.title.align = 0.5)
unmet <- count_grid + new_scale_fill() +
geom_tile(data = yesum, color='black', aes(x = month, y = year, fill = count_unmet_days)) +
geom_tile(data = mosum, color='black', aes(x = month, y = year, fill = count_unmet_days)) +
geom_text(data = yesum, size = 3.5, color='black', aes(x = month, y = year, label = count_unmet_days)) +
geom_text(data = mosum, size = 3.5, color='black', aes(x = month, y = year, label = count_unmet_days)) +
scale_fill_gradient2(low = "#63D1F4", high = "#8A2BE2", mid="#63D1F4",
midpoint = mean(mosum$count_unmet_days), name= 'Total Unmet Days')
total <- unmet + new_scale_fill() +
geom_tile(data = total_unmet_days_cell, color='black',fill="grey",aes(x = month, y = year, fill = count_unmet_days)) +
geom_text(data = total_unmet_days_cell, size = 3.5, color='black', aes(x = month, y = year, label = count_unmet_days))
#unmet_avg <- unmet + new_scale_fill()+
unmet_avg <- total + new_scale_fill()+
geom_tile(data = yeavg, color='black', aes(x = month, y = year, fill = avg)) +
geom_tile(data = moavg, color='black', aes(x = month, y = year, fill = avg)) +
geom_text(data = yeavg, size = 3.5, color='black', aes(x = month, y = year, label = avg)) +
geom_text(data = moavg, size = 3.5, color='black', aes(x = month, y = year, label = avg))+
scale_fill_gradient2(low = "#FFF8DC", mid = "#FFF8DC", high ="#FFF8DC",
name= 'Average Unmet Days', midpoint = mean(yeavg$avg))
} else{
count_grid <- ggplot() +
geom_tile(data=yrmodat, color='black',aes(x = month, y = year, fill = count_unmet_days)) +
geom_text(aes(label=yrmodat$count_unmet_days, x=yrmodat$month, y= yrmodat$year), size = 3.5, colour = "black") +
scale_fill_gradient2(low = "#00cc00", high = "red",mid ='yellow',
midpoint = 15, guide = "colourbar",
name= 'Unmet Days') +
theme(panel.background = element_rect(fill = "transparent"))+
theme() + labs(title = 'Unmet Demand Heatmap', y=NULL, x=NULL) +
scale_x_continuous(expand=c(0,0), breaks= x_breaks, labels=x_labs, position='top') +
scale_y_reverse(expand=c(0,0), breaks=y_breaks, labels= y_labs) +
theme(axis.ticks= element_blank()) +
theme(plot.title = element_text(size = 12, face = "bold",  hjust = 0.5)) +
theme(legend.title.align = 0.5)
unmet <- count_grid + new_scale_fill() +
geom_tile(data = yesum, color='black', aes(x = month, y = year, fill = count_unmet_days)) +
geom_tile(data = mosum, color='black', aes(x = month, y = year, fill = count_unmet_days)) +
geom_text(data = yesum, size = 3.5, color='black', aes(x = month, y = year, label = count_unmet_days)) +
geom_text(data = mosum, size = 3.5, color='black', aes(x = month, y = year, label = count_unmet_days)) +
scale_fill_gradient2(low = "#63D1F4", high = "#8A2BE2", mid='#CAB8FF',
midpoint = mean(mosum$count_unmet_days), name= 'Total Unmet Days')
total <- unmet + new_scale_fill() +
geom_tile(data = total_unmet_days_cell, color='black',fill="grey",aes(x = month, y = year, fill = count_unmet_days)) +
geom_text(data = total_unmet_days_cell, size = 3.5, color='black', aes(x = month, y = year, label = count_unmet_days))
#unmet_avg <- unmet + new_scale_fill()+
unmet_avg <- total + new_scale_fill()+
geom_tile(data = yeavg, color='black', aes(x = month, y = year, fill = avg)) +
geom_tile(data = moavg, color='black', aes(x = month, y = year, fill = avg)) +
geom_text(data = yeavg, size = 3.5, color='black', aes(x = month, y = year, label = avg)) +
geom_text(data = moavg, size = 3.5, color='black', aes(x = month, y = year, label = avg))+
scale_fill_gradient2(low = "#FFF8DC", mid = "#FFDEAD", high ="#DEB887",
name= 'Average Unmet Days', midpoint = mean(yeavg$avg))
}
fname2 <- paste(save_directory,paste0('fig.unmet_heatmap_gw.',elid, '.', runid, '.png'),sep = '/')
#furl2 <- paste(save_url, paste0('fig.unmet_heatmap.',elid, '.', runid, '.png'),sep = '/')
ggsave(fname2,plot = unmet_avg, width= 7, height=7)
print(paste('File saved to save_directory:', fname2))
#vahydro_post_metric_to_scenprop(scenprop$pid, 'dh_image_file', furl2, 'fig.unmet_heatmap', 0.0, ds)
###################################### Plot and save Second unmet Demand Grid
# contains count/ Avg unmet demand mgd
if (sum(mosum$count_unmet_days) == 0) {
count_grid <- ggplot() +
geom_tile(data=yrmodat, color='black',aes(x = month, y = year, fill = count_unmet_days)) +
geom_text(aes(label=paste(yrmodat$count_unmet_days,' / ',round(yrmodat$avg_unmet,1), sep=''),
x=yrmodat$month, y= yrmodat$year), size = 3.5, colour = "black") +
scale_fill_gradient2(low = "#00cc00", mid= "#00cc00", high = "#00cc00", guide = "colourbar",
name= 'Unmet Days') +
theme(panel.background = element_rect(fill = "transparent"))+
theme() + labs(title = 'Unmet Demand Heatmap', y=NULL, x=NULL) +
scale_x_continuous(expand=c(0,0), breaks= x_breaks, labels=x_labs, position='top') +
scale_y_reverse(expand=c(0,0), breaks=y_breaks, labels= y_labs) +
theme(axis.ticks= element_blank()) +
theme(plot.title = element_text(size = 12, face = "bold",  hjust = 0.5)) +
theme(legend.title.align = 0.5)
unmet <- count_grid + new_scale_fill() +
geom_tile(data = yesum, color='black', aes(x = month, y = year, fill = count_unmet_days)) +
geom_tile(data = mosum, color='black', aes(x = month, y = year, fill = count_unmet_days)) +
geom_text(data = yesum, size = 3.5, color='black', aes(x = month, y = year, label = count_unmet_days)) +
geom_text(data = mosum, size = 3.5, color='black', aes(x = month, y = year, label = count_unmet_days)) +
scale_fill_gradient2(low = "#63D1F4", high = "#8A2BE2", mid="#63D1F4",
midpoint = mean(mosum$count_unmet_days), name= 'Total Unmet Days')
total <- unmet + new_scale_fill() +
geom_tile(data = total_unmet_days_cell, color='black',fill="grey",aes(x = month, y = year, fill = count_unmet_days)) +
geom_text(data = total_unmet_days_cell, size = 3.5, color='black', aes(x = month, y = year, label = count_unmet_days))
#unmet_avg <- unmet + new_scale_fill()+
unmet_avg <- total + new_scale_fill()+
geom_tile(data = yeavg, color='black', aes(x = month, y = year, fill = avg)) +
geom_tile(data = moavg, color='black', aes(x = month, y = year, fill = avg)) +
geom_text(data = yeavg, size = 3.5, color='black', aes(x = month, y = year, label = avg)) +
geom_text(data = moavg, size = 3.5, color='black', aes(x = month, y = year, label = avg))+
scale_fill_gradient2(low = "#FFF8DC", mid = "#FFF8DC", high ="#FFF8DC",
name= 'Average Unmet Days', midpoint = mean(yeavg$avg))
} else{
count_grid <- ggplot() +
geom_tile(data=yrmodat, color='black',aes(x = month, y = year, fill = count_unmet_days)) +
geom_text(aes(label=paste(yrmodat$count_unmet_days,' / ',signif(yrmodat$avg_unmet,digits=1), sep=''),
x=yrmodat$month, y= yrmodat$year), size = 3, colour = "black") +
scale_fill_gradient2(low = "#00cc00", high = "red",mid ='yellow',
midpoint = 15, guide = "colourbar",
name= 'Unmet Days') +
theme(panel.background = element_rect(fill = "transparent"))+
theme() + labs(title = 'Unmet Demand Heatmap', y=NULL, x=NULL) +
scale_x_continuous(expand=c(0,0), breaks= x_breaks, labels=x_labs, position='top') +
scale_y_reverse(expand=c(0,0), breaks=y_breaks, labels= y_labs) +
theme(axis.ticks= element_blank()) +
theme(plot.title = element_text(size = 12, face = "bold",  hjust = 0.5)) +
theme(legend.title.align = 0.5)
unmet <- count_grid + new_scale_fill() +
geom_tile(data = yesum, color='black', aes(x = month, y = year, fill = count_unmet_days)) +
geom_tile(data = mosum, color='black', aes(x = month, y = year, fill = count_unmet_days)) +
geom_text(data = yesum, size = 3.5, color='black', aes(x = month, y = year, label = count_unmet_days)) +
geom_text(data = mosum, size = 3.5, color='black', aes(x = month, y = year, label = count_unmet_days)) +
scale_fill_gradient2(low = "#63D1F4", high = "#8A2BE2", mid='#CAB8FF',
midpoint = mean(mosum$count_unmet_days), name= 'Total Unmet Days')
total <- unmet + new_scale_fill() +
geom_tile(data = total_unmet_days_cell, color='black',fill="grey",aes(x = month, y = year, fill = count_unmet_days)) +
geom_text(data = total_unmet_days_cell, size = 3.5, color='black', aes(x = month, y = year, label = count_unmet_days))
#unmet_avg <- unmet + new_scale_fill()+
unmet_avg <- total + new_scale_fill()+
geom_tile(data = yeavg, color='black', aes(x = month, y = year, fill = avg)) +
geom_tile(data = moavg, color='black', aes(x = month, y = year, fill = avg)) +
geom_text(data = yeavg, size = 3.5, color='black', aes(x = month, y = year, label = avg)) +
geom_text(data = moavg, size = 3.5, color='black', aes(x = month, y = year, label = avg))+
scale_fill_gradient2(low = "#FFF8DC", mid = "#FFDEAD", high ="#DEB887",
name= 'Average Unmet Days', midpoint = mean(yeavg$avg))
}
fname3 <- paste(save_directory,paste0('fig.unmet_heatmap_amt_gw.',elid,'.',runid ,'.png'),sep = '/')
# furl3 <- paste(save_url, paste0('fig.unmet_heatmap_amt.',elid, '.', runid, '.png'),sep = '/')
ggsave(fname3,plot = unmet_avg, width= 9.5, height=6)
print('File saved to save_directory')
# vahydro_post_metric_to_scenprop(scenprop$pid, 'dh_image_file', furl3, 'fig.unmet_heatmap_amt', 0.0, ds)
# if("impoundment" %in% cols) {
#   # Plot and analyze impoundment sub-comps
#   dat$storage_pct <- as.numeric(dat$impoundment_use_remain_mg) * 3.07 / as.numeric(dat$impoundment_max_usable)
#   #set the storage percent
#   storage_pct <- mean(as.numeric(dat$storage_pct) )
#   if (is.na(storage_pct)) {
#     usable_pct_p0 <- 0
#     usable_pct_p10 <- 0
#     usable_pct_p50 <- 0
#   } else {
#     usable_pcts = quantile(as.numeric(dat$storage_pct), c(0,0.1,0.5) )
#     usable_pct_p0 <- usable_pcts["0%"]
#     usable_pct_p10 <- usable_pcts["10%"]
#     usable_pct_p50 <- usable_pcts["50%"]
#   }
#   # post em up
#   vahydro_post_metric_to_scenprop(scenprop$pid, 'om_class_Constant', NULL, 'usable_pct_p0', usable_pct_p0, ds)
#   vahydro_post_metric_to_scenprop(scenprop$pid, 'om_class_Constant', NULL, 'usable_pct_p10', usable_pct_p10, ds)
#   vahydro_post_metric_to_scenprop(scenprop$pid, 'om_class_Constant', NULL, 'usable_pct_p50', usable_pct_p50, ds)
#
#
#   # this has an impoundment.  Plot it up.
#   # Now zoom in on critical drought period
#   pdstart = as.Date(paste0(l90_year,"-06-01") )
#   pdend = as.Date(paste0(l90_year, "-11-15") )
#   datpd <- window(
#     dat,
#     start = pdstart,
#     end = pdend
#   );
#   fname <- paste(
#     save_directory,
#     paste0(
#       'l90_imp_storage.',
#       elid, '.', runid, '.png'
#     ),
#     sep = '/'
#   )
#   furl <- paste(
#     save_url,
#     paste0(
#       'l90_imp_storage.',
#       elid, '.', runid, '.png'
#     ),
#     sep = '/'
#   )
#   png(fname)
#   ymn <- 0
#   ymx <- 100
#
#   par(mar = c(5,5,2,5))
#   plot(
#     datpd$storage_pct * 100.0,
#     ylim=c(ymn,ymx),
#     main="Minimum Modeled Reservoir Storage Period",
#     ylab="Reservoir Storage (%)",
#     xlab=paste("Model Time Period",pdstart,"to",pdend)
#   )
#   par(new = TRUE)
#   if (pump_store) {
#     flow_ts <- datpd$Qreach
#   } else {
#     flow_ts <- datpd$impoundment_Qin
#   }
#   plot(flow_ts,col='blue', axes=FALSE, xlab="", ylab="")
#   lines(datpd$Qout,col='green')
#   lines(datpd$wd_mgd * 1.547,col='red')
#   axis(side = 4)
#   mtext(side = 4, line = 3, 'Flow/Demand (cfs)')
#   dev.off()
#   print(paste("Saved file: ", fname, "with URL", furl))
#   vahydro_post_metric_to_scenprop(scenprop$pid, 'dh_image_file', furl, 'fig.l90_imp_storage', 0.0, ds)
#
#   # l90 2 year
#   # this has an impoundment.  Plot it up.
#   # Now zoom in on critical drought period
#   pdstart = as.Date(paste0( (as.integer(l90_year) - 1),"-01-01") )
#   pdend = as.Date(paste0(l90_year, "-12-31") )
#   datpd <- window(
#     dat,
#     start = pdstart,
#     end = pdend
#   );
#   fname <- paste(
#     save_directory,
#     paste0(
#       'l90_imp_storage.2yr.',
#       elid, '.', runid, '.png'
#     ),
#     sep = '/'
#   )
#   furl <- paste(
#     save_url,
#     paste0(
#       'l90_imp_storage.2yr.',
#       elid, '.', runid, '.png'
#     ),
#     sep = '/'
#   )
#   png(fname)
#   ymn <- 1
#   ymx <- 100
#   par(mar = c(5,5,2,5))
#   par(mar = c(1,5,2,5),mfrow = c(2,1))
#   plot(
#     datpd$storage_pct * 100.0,
#     ylim=c(0,100),
#     ylab="Reservoir Storage (%)",
#     xlab="",
#     main=paste("Storage and Flows",sdate,"to",edate)
#   )
#   ymx <- ceiling(
#     pmax(
#       max(datpd$Qreach)
#     )
#   )
#   # if this is a pump store, refill_pump_mgd > 0
#   # then, plot Qreach first, overlaying impoundment_Qin
#   if (pump_store) {
#     flow_ts <- datpd$Qreach
#   } else {
#     flow_ts <- datpd$impoundment_Qin
#   }
#   plot(
#     flow_ts,
#     col='blue',
#     xlab="",
#     ylab='Flow/Demand (cfs)',
#     #ylim=c(0,ymx),
#     log="y",
#     yaxt="n" # supress labeling till we format
#   )
#   #legend()
#   y_ticks <- axTicks(2)
#   y_ticks_fmt <- format(y_ticks, scientific = FALSE)
#   axis(2, at = y_ticks, labels = y_ticks_fmt)
#   ymx <- ceiling(
#     pmax(
#       max(datpd$refill_pump_mgd),
#       max(datpd$impoundment_demand * 1.547)
#     )
#   )
#   #par(new = TRUE)
#   #plot(datpd$refill_pump_mgd * 1.547,col='green',xlab="",ylab="")
#   lines(datpd$refill_pump_mgd * 1.547,col='red')
#   lines(datpd$impoundment_demand * 1.547,col='green')
#   #axis(side = 4)
#   #mtext(side = 4, line = 3, 'Flow/Demand (cfs)')
#
#   dev.off()
#   print(paste("Saved file: ", fname, "with URL", furl))
#   vahydro_post_metric_to_scenprop(scenprop$pid, 'dh_image_file', furl, 'fig.l90_imp_storage.2yr', 0.0, ds)
#
#   # All Periods
#   # this has an impoundment.  Plot it up.
#   # Now zoom in on critical drought period
#   datpd <- dat
#   fname <- paste(
#     save_directory,
#     paste0(
#       'fig.imp_storage.all.',
#       elid, '.', runid, '.png'
#     ),
#     sep = '/'
#   )
#   furl <- paste(
#     save_url,
#     paste0(
#       'fig.imp_storage.all.',
#       elid, '.', runid, '.png'
#     ),
#     sep = '/'
#   )
#   png(fname)
#   ymn <- 0
#   ymx <- 100
#   par(mar = c(5,5,2,5))
#   par(mar = c(1,5,2,5),mfrow = c(2,1))
#   plot(
#     datpd$storage_pct * 100.0,
#     ylim=c(0,100),
#     ylab="Reservoir Storage (%)",
#     xlab="",
#     main=paste("Storage and Flows",sdate,"to",edate)
#   )
#   ymx <- ceiling(
#     pmax(
#       max(datpd$Qreach)
#     )
#   )
#   # if this is a pump store, refill_pump_mgd > 0
#   # then, plot Qreach first, overlaying impoundment_Qin
#   if (pump_store) {
#     flow_ts <- datpd$Qreach
#   } else {
#     flow_ts <- datpd$impoundment_Qin
#   }
#   plot(
#     flow_ts,
#     col='blue',
#     xlab="",
#     ylab='Flow/Demand (cfs)',
#     #ylim=c(0,ymx),
#     log="y",
#     yaxt="n" # supress labeling till we format
#   )
#   y_ticks <- axTicks(2)
#   y_ticks_fmt <- format(y_ticks, scientific = FALSE)
#   axis(2, at = y_ticks, labels = y_ticks_fmt)
#   ymx <- ceiling(
#     pmax(
#       max(datpd$refill_pump_mgd),
#       max(datpd$impoundment_demand * 1.547)
#     )
#   )
#   #par(new = TRUE)
#   #plot(datpd$refill_pump_mgd * 1.547,col='green',xlab="",ylab="")
#   if (pump_store) {
#     lines(datpd$refill_pump_mgd * 1.547,col='red')
#   }
#   lines(datpd$impoundment_demand * 1.547,col='green')
#   #axis(side = 4)
#   #mtext(side = 4, line = 3, 'Flow/Demand (cfs)')
#
#   dev.off()
#   print(paste("Saved file: ", fname, "with URL", furl))
#   vahydro_post_metric_to_scenprop(scenprop$pid, 'dh_image_file', furl, 'fig.imp_storage.all', 0.0, ds)
#
#   # Low Elevation Period
#   # Dat for Critical Period
#   elevs <- zoo(dat$storage_pct, order.by = index(dat));
#   loelevs <- group2(elevs);
#   l90 <- loelevs["90 Day Min"];
#   ndx = which.min(as.numeric(l90[,"90 Day Min"]));
#   l90_elev = round(loelevs[ndx,]$"90 Day Min",6);
#   l90_elevyear = loelevs[ndx,]$"year";
#   l90_elev_start = as.Date(paste0(l90_elevyear - 2,"-01-01"))
#   l90_elev_end = as.Date(paste0(l90_elevyear,"-12-31"))
#   elevdatpd <- window(
#     dat,
#     start = l90_elev_start,
#     end = l90_elev_end
#   );
#   datpd <- elevdatpd
#   fname <- paste(
#     save_directory,
#     paste0(
#       'elev90_imp_storage.all.',
#       elid, '.', runid, '.png'
#     ),
#     sep = '/'
#   )
#   furl <- paste(
#     save_url,
#     paste0(
#       'elev90_imp_storage.all.',
#       elid, '.', runid, '.png'
#     ),
#     sep = '/'
#   )
#   png(fname)
#   ymn <- 1
#   ymx <- 100
#   par(mar = c(5,5,2,5))
#   plot(
#     datpd$storage_pct * 100.0,
#     ylim=c(ymn,ymx),
#     main="Summer/Fall of L-90 Period",
#     ylab="Reservoir Storage (%)",
#     xlab=paste("Model Time Period",l90_elev_start,"to",l90_elev_end)
#   )
#   par(new = TRUE)
#   if (pump_store) {
#     flow_ts <- datpd$Qreach
#   } else {
#     flow_ts <- datpd$impoundment_Qin
#   }
#   plot(flow_ts,col='blue', axes=FALSE, xlab="", ylab="")
#   lines(datpd$Qout,col='green')
#   lines(datpd$wd_mgd * 1.547,col='red')
#   axis(side = 4)
#   mtext(side = 4, line = 3, 'Flow/Demand (cfs)')
#   dev.off()
#   print(paste("Saved file: ", fname, "with URL", furl))
#   vahydro_post_metric_to_scenprop(scenprop$pid, 'dh_image_file', furl, 'elev90_imp_storage.all', 0.0, ds)
#
# }
