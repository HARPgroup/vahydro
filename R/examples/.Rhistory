# rseg_bc_dat_400_df <- data.frame(rseg_bc_dat_400)
#
# imp_qa_400 <- sqldf(paste("select year,month,day, impoundment_Storage
#                  from 'rseg_bc_dat_400_df' WHERE impoundment_Storage <",capaity50pct,sep=""))
# length(imp_qa_400$impoundment_Storage)
#
# #600
# rseg_bc_dat_600 <- om_get_rundata(352078, 600, site = omsite)
# rseg_bc_dat_600_df <- data.frame(rseg_bc_dat_600)
#
# imp_qa_600 <- sqldf(paste("select year,month,day, impoundment_Storage
#                  from 'rseg_bc_dat_600_df' WHERE impoundment_Storage <",capaity50pct,sep=""))
# length(imp_qa_600$impoundment_Storage)
#
# #2
# rseg_bc_dat_2 <- om_get_rundata(352078, 2, site = omsite)
# rseg_bc_dat_2_df <- data.frame(rseg_bc_dat_2)
#
# imp_qa_2 <- sqldf(paste("select year,month,day, impoundment_Storage
#                  from 'rseg_bc_dat_2_df' WHERE impoundment_Storage <",capaity50pct,sep=""))
# length(imp_qa_2$impoundment_Storage)
################################################################################################
################################################################################################
rseg_df$Qnatural
fac_df$Qnatural
rseg_df$local_channel_Qout
dat.qa
dat.qa <- dat_join
duplicated_names <- duplicated(colnames(dat.qa))
# Remove Duplicate Column Names
dat.qa <- dat.qa[!duplicated_names]
dat.qa <- sqldf(paste("SELECT date, Qout, local_channel_Qout
FROM 'dat.qa'
")
)
dat.qa <- dat_join
qa.df <- sqldf(paste("SELECT date, Qout, local_channel_Qout, Qlocal
FROM 'dat.qa'
")
)
dat.qa <- dat_join
# Find Duplicate Column Names
duplicated_names <- duplicated(colnames(dat.qa))
# Remove Duplicate Column Names
dat.qa <- dat.qa[!duplicated_names]
qa.df <- sqldf(paste("SELECT date, Qout, local_channel_Qout, Qlocal
FROM 'dat.qa'
")
)
View(qa.df)
colnames(dat.qa)
qa.df <- sqldf(paste("SELECT date, Qout, local_channel_Qout, Qlocal, Qtrib, Qlocal+Qtrib
FROM 'dat.qa'
")
)
qa.df <- sqldf(paste("SELECT date, Qout, local_channel_Qout, Qlocal, release
FROM 'dat.qa'
")
)
View(qa.df)
qa.df <- sqldf(paste("SELECT date, Qout, local_channel_Qout, Qlocal, release, Qup
FROM 'dat.qa'
")
)
View(qa.df)
qa.df <- sqldf(paste("SELECT date, Qout, local_channel_Qout, Qlocal, Qin
FROM 'dat.qa'
")
)
colnames(dat.qa)
qa.df <- sqldf(paste("SELECT date, Qout, local_channel_Qout, Qlocal, local_channel_Qin
FROM 'dat.qa'
")
)
View(qa.df)
qa.df <- sqldf(paste("SELECT date, Qout, local_channel_Qout, Qlocal, impoundment_Qout
FROM 'dat.qa'
")
)
View(qa.df)
qa.df <- sqldf(paste("SELECT date, Qout, local_channel_Qout, Qlocal, impoundment_Qout, Qlocal + impoundment_Qout
FROM 'dat.qa'
")
)
png(file=paste(export_path,"fdc_",runid_i,".png",sep=""),width=560, height=450)
hydroTSM::fdc(
# cbind(dat_join$Qnatural, dat_join$Qout),
cbind(dat_join$Qnatural, dat_join$available_mgd),
yat = c(0.10,1,5,10,25,100,400),
leg.txt = c("Flow (Natural)",legend_text_i),
ylab = "Q, [cfs]",
ylim=c(0.01, 500)
)
dev.off()
png(file=paste(export_path,"fdc_",runid_i,".png",sep=""),width=560, height=450)
hydroTSM::fdc(
# cbind(dat_join$Qnatural, dat_join$Qout),
cbind(dat_join$Qnatural, dat_join$available_mgd*1.547),
yat = c(0.10,1,5,10,25,100,400),
leg.txt = c("Flow (Natural)",legend_text_i),
ylab = "Q, [cfs]",
ylim=c(0.01, 500)
)
dev.off()
dat_join$available_mgd*1.547
# FLOW DURATION CURVE PLOTS ---------------------------------------------------
png(file=paste(export_path,"fdc_",runid_i,".png",sep=""),width=560, height=450)
hydroTSM::fdc(
# cbind(dat_join$Qnatural, dat_join$Qout),
cbind(dat_join$Qnatural, dat_join$available_mgd),
yat = c(0.10,1,5,10,25,100,400),
leg.txt = c("Flow (Natural)",legend_text_i),
ylab = "Q, [cfs]",
ylim=c(0.01, 500)
)
dev.off()
png(file=paste(export_path,"fdc_",runid_i,".png",sep=""),width=560, height=450)
hydroTSM::fdc(
# cbind(dat_join$Qnatural, dat_join$Qout),
cbind(dat_join$Qnatural, dat_join$Qreach),
yat = c(0.10,1,5,10,25,100,400),
leg.txt = c("Flow (Natural)",legend_text_i),
ylab = "Q, [cfs]",
ylim=c(0.01, 500)
)
dev.off()
# FLOW DURATION CURVE PLOTS ---------------------------------------------------
png(file=paste(export_path,"fdc_",runid_i,".png",sep=""),width=560, height=450)
hydroTSM::fdc(
# cbind(dat_join$Qnatural, dat_join$Qout),
cbind(dat_join$Qnatural, dat_join$Qreach),
yat = c(0.10,1,5,10,25,100,400),
leg.txt = c("Flow (Natural)",legend_text_i),
ylab = "Q, [cfs]",
ylim=c(0.01, 500)
)
dev.off()
# FLOW DURATION CURVE PLOTS ---------------------------------------------------
png(file=paste(export_path,"fdc_",runid_i,".png",sep=""),width=560, height=450)
hydroTSM::fdc(
# cbind(dat_join$Qnatural, dat_join$Qout),
cbind(dat_join$Qnatural, dat_join$Qout),
yat = c(0.10,1,5,10,25,100,400),
leg.txt = c("Flow (Natural)",legend_text_i),
ylab = "Q, [cfs]",
ylim=c(0.01, 500)
)
dev.off()
library('hydrotools')
library('zoo')
basepath='/var/www/R';
source("/var/www/R/config.R")
################################################################################################
# LOAD MODEL IDs:
rseg_om_id <- 352123 #South Fork Powell River - Below Big Cherry Reservoir
fac_om_id <- 247415 #BIG STONE GAP WTP:Powell River
################################################################################################
# GENERATE PLOTS:
################################################################################################
dev.off()
# export_path <- "C:/Users/nrf46657/Desktop/VAHydro Development/GitHub/vahydro/R/permitting/Big Stone Gap WTP/"
export_path <- "C:/Users/nrf46657/Desktop/VWP Modeling/Big Stone Gap WTP/September2022_Coordination/big_cherry_4/"
# batch_list <- list(list(runid = 400,legend_text = "Flow (Total Permitted)"),
#                    list(runid = 600,legend_text = "Flow (2.6 mgd & 40% Flow-by)"),
#                    list(runid = 2,legend_text = "Flow (Current Reported Use)")
# )
# batch_list <- list(list(runid = 400,legend_text = "Flow (Qintake 400)"),
#                    list(runid = 600,legend_text = "Flow (Qintake 600)")
# )
batch_list <- list(list(runid = 400,legend_text = "Flow (Qintake 400)"))
#i <- 1
for (i in 1:length(batch_list)) {
runid_i <- batch_list[[i]]$runid
legend_text_i <- batch_list[[i]]$legend_text
################################################################################################
# RETRIEVE RSEG AND FAC DATA, JOIN INTO ONE TABLE
rseg_dat <- om_get_rundata(rseg_om_id, runid_i, site = omsite)
rseg_df <- data.frame(rseg_dat)
rseg_df <- cbind("date" = rownames(rseg_df),rseg_df)
fac_dat <- om_get_rundata(fac_om_id, runid_i, site = omsite)
fac_df <- data.frame(fac_dat)
fac_df <- cbind("date" = rownames(fac_df),fac_df)
dat_join <- sqldf(
paste(
"SELECT *
FROM rseg_df AS a
LEFT OUTER JOIN fac_df AS b
ON a.date = b.date")
)
################################################################################################
################################################################################################
# QA 9.19.22
################################################################################################
rseg_df$Qnatural
fac_df$Qnatural
dat.qa <- dat_join
# Find Duplicate Column Names
duplicated_names <- duplicated(colnames(dat.qa))
# Remove Duplicate Column Names
dat.qa <- dat.qa[!duplicated_names]
dat.qa <- sqldf(paste("SELECT date, Qnatural, Qout, Runit, Runit * 8.2
FROM 'dat.qa'
")
)
qa.df <- sqldf(paste("SELECT date, Qout, local_channel_Qout, Qlocal, impoundment_Qout
FROM 'dat.qa'
")
)
colnames(dat.qa)
################################################################################################
################################################################################################
# FLOW DURATION CURVE PLOTS ---------------------------------------------------
png(file=paste(export_path,"fdc_",runid_i,".png",sep=""),width=560, height=450)
hydroTSM::fdc(
# cbind(dat_join$Qnatural, dat_join$Qout),
cbind(dat_join$Qnatural, dat_join$Qintake),
yat = c(0.10,1,5,10,25,100,400),
leg.txt = c("Flow (Natural)",legend_text_i),
ylab = "Q, [cfs]",
ylim=c(0.01, 500)
)
dev.off()
# # DROUGHT PERIOD PLOT
#   # REGULAR Y-AXIS ------------------------------------------------------------
#   xmn <- as.Date('1999-01-01')
#   xmx <- as.Date('1999-12-31')
#   png(paste(export_path,"/hydrograph_Qnatural_Qintake_",xmn,"_",xmx,"_",runid_i,".png",sep=""), width = 1100, height = 600)
#   ymn <- 0
#   ymx <- 110
#   par(mar = c(5,5,2,5))
#   plot(as.numeric(fac_df$Qnatural)~as.Date(fac_df$date),type = "l", lty=2, lwd = 1,
#        ylim=c(ymn,ymx),xlim=c(xmn,xmx),ylab="Flow (cfs)",xlab=paste("\nDate\n",xmn,"to",xmx))
#   par(new = TRUE)
#   plot(as.numeric(fac_df$Qintake)~as.Date(fac_df$date),type = "l",col='brown3', lwd = 2,
#        axes=FALSE,ylim=c(ymn,ymx),xlim=c(xmn,xmx),ylab="",xlab="")
#   legend("topright",legend=c("Flow (Natural)",legend_text_i),col=c("black","brown3"), lty=c(2,1), lwd=c(1,2), cex=1)
#   dev.off()
#   # LOG Y-AXIS ------------------------------------------------------------
#   xmn <- as.Date('1999-01-01')
#   xmx <- as.Date('1999-12-31')
#   png(paste(export_path,"/hydrograph_Qnatural_Qintake_",xmn,"_",xmx,"_",runid_i,"_log.png",sep=""), width = 1100, height = 600)
#   ymn <- 0
#   ymx <- 110
#   par(mar = c(5,5,2,5))
#   plot(as.numeric(fac_df$Qnatural)~as.Date(fac_df$date), log="y",type = "l", lty=2, lwd = 1,
#        xlim=c(xmn,xmx),ylab="Flow (cfs)",xlab=paste("\nDate\n",xmn,"to",xmx))
#   par(new = TRUE)
#   plot(as.numeric(fac_df$Qintake)~as.Date(fac_df$date), log="y",type = "l",col='brown3', lwd = 2,
#        axes=FALSE,xlim=c(xmn,xmx),ylab="",xlab="")
#   legend("topright",legend=c("Flow (Natural)",legend_text_i),col=c("black","brown3"), lty=c(2,1), lwd=c(1,2), cex=1)
#   dev.off()
#
#
# # WET PERIOD PLOT
#   # REGULAR Y-AXIS ------------------------------------------------------------
#   xmn <- as.Date('2003-01-01')
#   xmx <- as.Date('2003-12-31')
#   png(paste(export_path,"/hydrograph_Qnatural_Qintake_",xmn,"_",xmx,"_",runid_i,".png",sep=""), width = 1100, height = 600)
#   ymn <- 0
#   ymx <- 110
#   par(mar = c(5,5,2,5))
#   plot(as.numeric(fac_df$Qnatural)~as.Date(fac_df$date),type = "l", lty=2, lwd = 1,
#        ylim=c(ymn,ymx),xlim=c(xmn,xmx),ylab="Flow (cfs)",xlab=paste("\nDate\n",xmn,"to",xmx))
#   par(new = TRUE)
#   plot(as.numeric(fac_df$Qintake)~as.Date(fac_df$date),type = "l",col='brown3', lwd = 2, axes=FALSE,ylim=c(ymn,ymx),xlim=c(xmn,xmx),ylab="",xlab="")
#   legend("topright",legend=c("Flow (Natural)",legend_text_i),col=c("black","brown3"), lty=c(2,1), lwd=c(1,2), cex=1)
#   dev.off()
#   # LOG Y-AXIS ------------------------------------------------------------
#   xmn <- as.Date('2003-01-01')
#   xmx <- as.Date('2003-12-31')
#   png(paste(export_path,"/hydrograph_Qnatural_Qintake_",xmn,"_",xmx,"_",runid_i,"_log.png",sep=""), width = 1100, height = 600)
#   ymn <- 0
#   ymx <- 110
#   par(mar = c(5,5,2,5))
#   plot(as.numeric(fac_df$Qnatural)~as.Date(fac_df$date), log="y",type = "l", lty=2, lwd = 1,
#        xlim=c(xmn,xmx),ylab="Flow (cfs)",xlab=paste("\nDate\n",xmn,"to",xmx))
#   par(new = TRUE)
#   plot(as.numeric(fac_df$Qintake)~as.Date(fac_df$date), log="y",type = "l",col='brown3', lwd = 2,
#        axes=FALSE,xlim=c(xmn,xmx),ylab="",xlab="")
#   legend("topright",legend=c("Flow (Natural)",legend_text_i),col=c("black","brown3"), lty=c(2,1), lwd=c(1,2), cex=1)
#   dev.off()
}
################################################################################################
################################################################################################
################################################################################################
# NUMBER OF DAYS STORAGE IS BELOW 50%
# maxcapacity <- 1941.47
# capaity50pct <- maxcapacity*0.5
#
# #400
# rseg_bc_dat_400 <- om_get_rundata(352078, 400, site = omsite)
# rseg_bc_dat_400_df <- data.frame(rseg_bc_dat_400)
#
# imp_qa_400 <- sqldf(paste("select year,month,day, impoundment_Storage
#                  from 'rseg_bc_dat_400_df' WHERE impoundment_Storage <",capaity50pct,sep=""))
# length(imp_qa_400$impoundment_Storage)
#
# #600
# rseg_bc_dat_600 <- om_get_rundata(352078, 600, site = omsite)
# rseg_bc_dat_600_df <- data.frame(rseg_bc_dat_600)
#
# imp_qa_600 <- sqldf(paste("select year,month,day, impoundment_Storage
#                  from 'rseg_bc_dat_600_df' WHERE impoundment_Storage <",capaity50pct,sep=""))
# length(imp_qa_600$impoundment_Storage)
#
# #2
# rseg_bc_dat_2 <- om_get_rundata(352078, 2, site = omsite)
# rseg_bc_dat_2_df <- data.frame(rseg_bc_dat_2)
#
# imp_qa_2 <- sqldf(paste("select year,month,day, impoundment_Storage
#                  from 'rseg_bc_dat_2_df' WHERE impoundment_Storage <",capaity50pct,sep=""))
# length(imp_qa_2$impoundment_Storage)
################################################################################################
################################################################################################
png(file=paste(export_path,"fdc_",runid_i,".png",sep=""),width=560, height=450)
hydroTSM::fdc(
# cbind(dat_join$Qnatural, dat_join$Qout),
cbind(dat_join$Qnatural, dat_join$Qintake),
yat = c(0.10,1,5,10,25,100,400),
leg.txt = c("Flow (Natural)",legend_text_i),
ylab = "Q, [cfs]",
ylim=c(0.01, 500)
)
dev.off()
rseg_df$Qnatural
fac_df$Qnatural
dat.qa <- dat_join
# Find Duplicate Column Names
duplicated_names <- duplicated(colnames(dat.qa))
# Remove Duplicate Column Names
dat.qa <- dat.qa[!duplicated_names]
View(dat.qa)
colnames(dat.qa)
order(colnames(dat.qa))
sort(colnames(dat.qa))
dat.qa$local_channel_Qout
qa.df <- sqldf(paste("SELECT date, Qout, local_channel_Qout
FROM 'dat.qa'
")
)
View(qa.df)
sort(colnames(dat.qa))
qa.df <- sqldf(paste("SELECT date, Qout, local_channel_Qout, local_channel_demand, local_channel_Qin
FROM 'dat.qa'
")
)
qa.df <- sqldf(paste("SELECT date, Qout, local_channel_Qout, local_channel_demand, local_channel_Qin, Local.Runoff
FROM 'dat.qa'
")
)
qa.df <- sqldf(paste("SELECT date, Qout, local_channel_Qout, local_channel_demand, local_channel_Qin, 'Local.Runoff'
FROM 'dat.qa'
")
)
qa.df <- sqldf(paste("SELECT date, Qout, local_channel_Qout, local_channel_demand, local_channel_Qin, `Local.Runoff`
FROM 'dat.qa'
")
)
View(qa.df)
sort(colnames(dat.qa))
qa.df <- sqldf(paste("SELECT date, Qout, local_channel_Qout, local_channel_demand, local_channel_Qin, local_channel_Rin
FROM 'dat.qa'
")
)
View(qa.df)
qa.df <- sqldf(paste("SELECT date, Qout, local_channel_Qout, local_channel_demand, local_channel_Qin+local_channel_Rin
FROM 'dat.qa'
")
)
qa.df <- sqldf(paste("SELECT date, Qout, local_channel_Qout, local_channel_demand, local_channel_Qin+local_channel_Rin-local_channel_demand
FROM 'dat.qa'
")
)
qa.df <- sqldf(paste("SELECT date, Qout, local_channel_Qout, local_channel_demand, local_channel_Qin, local_channel_Rin
FROM 'dat.qa'
")
)
sort(colnames(dat.qa))
qa.df <- sqldf(paste("SELECT date,Qout, local_channel_Qout,
local_channel_demand,
local_channel_Qin,
Qlocal, Qtrib
FROM 'dat.qa'
")
)
qa.df <- sqldf(paste("SELECT date,Qout, local_channel_Qout,
local_channel_demand,
local_channel_Qin,
Qlocal+Qtrib
FROM 'dat.qa'
")
)
qa.df <- sqldf(paste("SELECT date,Qout, local_channel_Qout,
local_channel_demand,
local_channel_Qin,
Qlocal, Qtrib, wd_channel_cfs
FROM 'dat.qa'
")
)
qa.df <- sqldf(paste("SELECT date,Qout, local_channel_Qout,
local_channel_demand,
local_channel_Qin,
Qlocal, Qtrib, wd_channel_cfs, wd_mgd
FROM 'dat.qa'
")
)
qa.df <- sqldf(paste("SELECT date,Qout, local_channel_Qout,
local_channel_demand,
local_channel_Qin,
Qlocal, Qtrib, wd_channel_cfs, wd_mgd*1.547
FROM 'dat.qa'
")
)
png(file=paste(export_path,"fdc_",runid_i,".png",sep=""),width=560, height=450)
hydroTSM::fdc(
# cbind(dat_join$Qnatural, dat_join$Qout),
cbind(dat_join$Qnatural, dat_join$Qintake, dat_join$wd_channel_cfs),
yat = c(0.10,1,5,10,25,100,400),
leg.txt = c("Flow (Natural)",legend_text_i),
ylab = "Q, [cfs]",
ylim=c(0.01, 500)
)
dev.off()
qa.df <- sqldf(paste("SELECT date,Qout, local_channel_Qout,
local_channel_demand,
local_channel_Qin,
Qlocal, Qtrib, wd_channel_cfs, wd_mgd*1.547,
impoundment_Qout + Qlocal_below_bc + (ps_mgd - wd_mgd) * 1.547
FROM 'dat.qa'
")
)
# FLOW DURATION CURVE PLOTS ---------------------------------------------------
png(file=paste(export_path,"fdc_",runid_i,".png",sep=""),width=560, height=450)
hydroTSM::fdc(
# cbind(dat_join$Qnatural, dat_join$Qout),
cbind(dat_join$Qnatural, dat_join$Qintake, dat_join$available_mgd*1.547),
yat = c(0.10,1,5,10,25,100,400),
leg.txt = c("Flow (Natural)",legend_text_i),
ylab = "Q, [cfs]",
ylim=c(0.01, 500)
)
dev.off()
# FLOW DURATION CURVE PLOTS ---------------------------------------------------
png(file=paste(export_path,"fdc_",runid_i,".png",sep=""),width=560, height=450)
hydroTSM::fdc(
# cbind(dat_join$Qnatural, dat_join$Qout),
cbind(dat_join$Qnatural, dat_join$Qintake, dat_join$bc_release_cfs),
yat = c(0.10,1,5,10,25,100,400),
leg.txt = c("Flow (Natural)",legend_text_i),
ylab = "Q, [cfs]",
ylim=c(0.01, 500)
)
dev.off()
# Unable to install the HASP package on deq1 server using the recommended method: https://github.com/USGS-R/HASP
# Load USGS HASP package function files explicitly:
source("https://raw.githubusercontent.com/USGS-R/HASP/main/R/gwl_single_sites.R")
source("https://raw.githubusercontent.com/USGS-R/HASP/main/R/frequency_analysis.R")
source("https://raw.githubusercontent.com/USGS-R/HASP/main/R/ggplot2_utils.R")
##########################################################################################
##########################################################################################
##########################################################################################
# rm(list = ls())  #clear variables
library(dplyr)
library(dataRetrieval)
library(ggplot2)
library(sqldf)
# save_directory = '/var/www/html/images/dh'
save_directory = 'C:/Users/nrf46657/Desktop/GitHub/vahydro/drupal/dh_drought/src/r/gw_plots'
basepath <- "/var/www/R/"
source(paste(basepath,"config.local.private",sep = ''))
#Pull in list of all drought USGS well dH Features
URL <- paste(base_url,"drought-wells-export", sep = "/")
#well_list <- read.table(URL,header = TRUE, sep = ",")
well_list <- read.csv(URL, sep = ",")
# select eastern shore wells only
# well_list <- sqldf("SELECT *
#                     FROM well_list
#                     WHERE `Feature.Name` LIKE '%110S%'
#                     OR `Feature.Name` LIKE '%103A%'
#                    ")
hydrocodes <- well_list$hydrocode
# j = 1
#Begin loop to run through each USGS gage
for (j in 1:length(hydrocodes)) {
siteNumber <- hydrocodes[j]
siteNumber <- toString(siteNumber)
#print(paste("USGS siteNumber: ", siteNumber, sep=''));
cat("EXECUTING WELL ",j," OF ",length(hydrocodes)," - USGS siteNumber: ", siteNumber,"\n",sep="")
site = unlist(strsplit(siteNumber, split='_', fixed=TRUE))[2]
#Field GWL data:
gwl_data <- dataRetrieval::readNWISgwl(site)
# Daily data:
parameterCd <- "72019" #Depth to water level, feet below land surface
statCd <- "00001" # MAXIMUM
# statCd <- "00002" # MINIMUM
# statCd <- "00003"# MEAN
# statCd <- "00008" # MEDIAN
dv <- dataRetrieval::readNWISdv(site,
parameterCd,
statCd = statCd)
y_axis_label <- readNWISpCode(parameterCd)$parameter_nm
title <- paste(site, " - ", readNWISsite(site)$station_nm, sep="")
plt <- monthly_frequency_plot(dv,
gwl_data,
parameter_cd = parameterCd,
plot_title = title,
y_axis_label = y_axis_label,
flip = TRUE)
filename = paste('usgs_',site,'_monthly_frequency_plot.png',sep = '')
print(paste('Saving image file to: ',save_directory,'/',filename,sep=''))
ggsave(file=filename, path = save_directory , width=6, height=5)
} # end usgs well for loop
