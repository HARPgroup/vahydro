# abline(h=min(cmp_l90$Model), col="black", lty = "dashed")
mtext(round(min(cmp_l90$USGS),1), side=2, line=0, las=1, at=min(cmp_l90$USGS), cex=0.6, col="blue")
# mtext(round(min(cmp_l90$Model),1), side=4, line=0, las=1, at=(min(cmp_l90$Model)), cex=0.6, col="black")
barplot(
cbind(USGS) ~ Year, data=cmp_l30,
col=c("blue"),
main=paste("USGS 02036500 FINE CREEK AT FINE CREEK MILLS, VA\n30 Day Low Flow",sep=""),
beside=TRUE,
ylab = "Streamflow (cfs)",
ylim = c(0,ymax_val),
cex.main=0.8,
cex.axis=0.9,
cex.lab=1,
cex.names=0.7
)
legend("topleft",legend=c("USGS"),fill=c("blue"),cex=1)
abline(h=min(cmp_l30$USGS), col="blue", lty = "dashed")
mtext(round(min(cmp_l30$USGS),1), side=2, line=0, las=1, at=min(cmp_l30$USGS), cex=0.6, col="blue")
barplot(
cbind(USGS) ~ Year, data=cmp_l7,
col=c("blue"),
main=paste("USGS 02036500 FINE CREEK AT FINE CREEK MILLS, VA\n7 Day Low Flow",sep=""),
beside=TRUE,
ylab = "Streamflow (cfs)",
ylim = c(0,ymax_val),
cex.main=0.8,
cex.axis=0.9,
cex.lab=1,
cex.names=0.7
)
legend("topleft",legend=c("USGS"),fill=c("blue"),cex=1)
abline(h=min(cmp_l7$USGS), col="blue", lty = "dashed")
mtext(round(min(cmp_l7$USGS),1), side=2, line=0, las=1, at=min(cmp_l7$USGS), cex=0.6, col="blue")
barplot(
cbind(USGS) ~ Year, data=cmp_l1,
col=c("blue"),
main=paste("USGS 02036500 FINE CREEK AT FINE CREEK MILLS, VA\n1 Day Low Flow",sep=""),
beside=TRUE,
ylab = "Streamflow (cfs)",
ylim = c(0,ymax_val),
cex.main=0.8,
cex.axis=0.9,
cex.lab=1,
cex.names=0.7
)
legend("topleft",legend=c("USGS"),fill=c("blue"),cex=1)
abline(h=min(cmp_l1$USGS), col="blue", lty = "dashed")
mtext(round(min(cmp_l1$USGS),1), side=2, line=0, las=1, at=min(cmp_l1$USGS), cex=0.6, col="blue")
ymax_val
ymax_val
max(c(cmp_l90$USGS))
ymax_val
#----------------------------------------------
site <- "http://deq1.bse.vt.edu/d.dh"    #Specify the site of interest, either d.bet OR d.dh
#----------------------------------------------
# Load Libraries
basepath='/var/www/R';
source(paste(basepath,'config.R',sep='/'))
#----------------------------------------------
#site <- base_url    #Specify the site of interest, either d.bet OR d.dh, taken from the config.R
# this is now set in config.local.R
#----------------------------------------------
# source(paste(om_location,'R/summarize','rseg_elfgen.R',sep='/'))
library(stringr)
# dirs/URLs
save_directory <- "/var/www/html/data/proj3/out"
library(hydrotools)
# authenticate
ds <- RomDataSource$new(site, rest_uname)
ds$get_token(rest_pw)
# Read Args
# argst <- commandArgs(trailingOnly=T)
# pid <- as.integer(argst[1])
# elid <- as.integer(argst[2])
# runid <- as.integer(argst[3])
#-------------------------
# save_directory <- 'C:/Users/nrf46657/Desktop/GitHub/om/R/summarize'
save_directory <- 'C:/Users/nrf46657/Desktop/GitHub/vahydro/R/permitting/magnolia_green'
#-------------------------
# pid <- 4705859 # Swift Creek Reservoir
# elid <- 210815  # Swift Creek Reservoir
pid <- 5396059 # MAGNOLIA GREEN GOLF CLUB:Swift Creek
elid <- 351042 # MAGNOLIA GREEN GOLF CLUB:Swift Creek
# runid.list <- c(601)
runid.list <- c(600)
# legend_text <- c("Pre-Giles (0 surface water demand)",
#                  "Post-Giles (1.05 mgd & 90% Flowby)")
legend_text <- c("proposed limits")
# legend_text <- FALSE
dat_all <- list()
i<-1
runid <- runid.list[i]
# Note: when we migrate to om_get_rundata()
# we must insure that we do NOT use the auto-trim to water year
# as we want to have the model_run_start and _end for scenario storage
dat <- fn_get_runfile(elid, runid, site= omsite,  cached = FALSE)
mode(dat) <- 'numeric'
syear = as.integer(min(dat$year))
eyear = as.integer(max(dat$year))
# syear = 1984
# eyear = 2005
model_run_start <- min(dat$thisdate)
model_run_end <- max(dat$thisdate)
if (syear < (eyear - 2)) {
sdate <- as.Date(paste0(syear,"-10-01"))
edate <- as.Date(paste0(eyear,"-09-30"))
flow_year_type <- 'water'
} else {
sdate <- as.Date(paste0(syear,"-02-01"))
edate <- as.Date(paste0(eyear,"-12-31"))
flow_year_type <- 'calendar'
}
dat <- wind
mode(dat) <- 'numeric'
scen.propname<-paste0('runid_', runid)
cols <- names(dat)
dat$Qbaseline <- dat$Qout +
(dat$wd_cumulative_mgd - dat$ps_cumulative_mgd ) * 1.547
Qbaseline <- mean(as.numeric(dat$Qbaseline) )
if (is.na(Qbaseline)) {
Qbaseline = Qout +
(wd_cumulative_mgd - ps_cumulative_mgd ) * 1.547
}
cols <- names(dat)
cols <- names(dat)
datdf <- as.data.frame(dat)
dat_all[[paste("datdf_",runid,sep='')]] <- datdf
dat_all
#----------------------------------------------
site <- "http://deq1.bse.vt.edu/d.dh"    #Specify the site of interest, either d.bet OR d.dh
#----------------------------------------------
# Load Libraries
basepath='/var/www/R';
source(paste(basepath,'config.R',sep='/'))
#----------------------------------------------
#site <- base_url    #Specify the site of interest, either d.bet OR d.dh, taken from the config.R
# this is now set in config.local.R
#----------------------------------------------
# source(paste(om_location,'R/summarize','rseg_elfgen.R',sep='/'))
library(stringr)
# dirs/URLs
save_directory <- "/var/www/html/data/proj3/out"
library(hydrotools)
# authenticate
ds <- RomDataSource$new(site, rest_uname)
ds$get_token(rest_pw)
# Read Args
# argst <- commandArgs(trailingOnly=T)
# pid <- as.integer(argst[1])
# elid <- as.integer(argst[2])
# runid <- as.integer(argst[3])
#-------------------------
# save_directory <- 'C:/Users/nrf46657/Desktop/GitHub/om/R/summarize'
save_directory <- 'C:/Users/nrf46657/Desktop/GitHub/vahydro/R/permitting/magnolia_green'
#-------------------------
# pid <- 4705859 # Swift Creek Reservoir
# elid <- 210815  # Swift Creek Reservoir
pid <- 5396059 # MAGNOLIA GREEN GOLF CLUB:Swift Creek
elid <- 351042 # MAGNOLIA GREEN GOLF CLUB:Swift Creek
# runid.list <- c(601)
runid.list <- c(600)
# legend_text <- c("Pre-Giles (0 surface water demand)",
#                  "Post-Giles (1.05 mgd & 90% Flowby)")
legend_text <- c("proposed limits")
# legend_text <- FALSE
dat_all <- list()
#i<-1
for (i in 1:length(runid.list)) {
runid <- runid.list[i]
# Note: when we migrate to om_get_rundata()
# we must insure that we do NOT use the auto-trim to water year
# as we want to have the model_run_start and _end for scenario storage
dat <- fn_get_runfile(elid, runid, site= omsite,  cached = FALSE)
mode(dat) <- 'numeric'
syear = as.integer(min(dat$year))
eyear = as.integer(max(dat$year))
# syear = 1984
# eyear = 2005
model_run_start <- min(dat$thisdate)
model_run_end <- max(dat$thisdate)
if (syear < (eyear - 2)) {
sdate <- as.Date(paste0(syear,"-10-01"))
edate <- as.Date(paste0(eyear,"-09-30"))
flow_year_type <- 'water'
} else {
sdate <- as.Date(paste0(syear,"-02-01"))
edate <- as.Date(paste0(eyear,"-12-31"))
flow_year_type <- 'calendar'
}
dat <- window(dat, start = sdate, end = edate);
mode(dat) <- 'numeric'
scen.propname<-paste0('runid_', runid)
cols <- names(dat)
# dat$Qbaseline <- dat$Qout +
#   (dat$wd_cumulative_mgd - dat$ps_cumulative_mgd ) * 1.547
#
# Qbaseline <- mean(as.numeric(dat$Qbaseline) )
# if (is.na(Qbaseline)) {
#   Qbaseline = Qout +
#     (wd_cumulative_mgd - ps_cumulative_mgd ) * 1.547
# }
datdf <- as.data.frame(dat)
# modat <- sqldf("select month, avg(wd_cumulative_mgd) as wd_mgd, avg(ps_cumulative_mgd) as ps_mgd from datdf group by month")
dat_all[[paste("datdf_",runid,sep='')]] <- datdf
} #end for loop
###############################################
# RSEG FDC
###############################################
# base_var <- "Qbaseline" #BASE VARIABLE USED IN FDCs AND HYDROGRAPHS
# comp_var <- "Qout" #VARIABLE TO COMPARE AGAINST BASE VARIABLE, DEFAULT Qout
base_var <- "Qintake"
comp_var <- "Qintake_post"
# build data frame of data needed for constructing the fdc curves
dat_base <- dat_all[[1]]
fdc_dat <- data.frame(dat_base[names(dat_base)== base_var])
#j <- 1
for (j in 1:length(dat_all)) {
datpd_j <- dat_all[[j]]
fdc_dat <- cbind(fdc_dat,datpd_j[names(datpd_j)== comp_var])
colnames(fdc_dat)[which(names(fdc_dat) == comp_var)] <- paste(runid.list[j],comp_var,sep="_")
} # end for loop
fname <- paste(
save_directory,
paste0(
'fdc.',
elid, '.',paste(runid.list, collapse = "."), '.png'
),
sep = '/'
)
# FOR TESTING
save_url <- save_directory
furl <- paste(
save_url,
paste0(
'fdc.',
elid, '.',paste(runid.list, collapse = "."), '.png'
),
sep = '/'
)
if (legend_text != FALSE){
legend_text = c("Baseline Flow",legend_text)
} else {
legend_text = c("Baseline Flow",runid.list)
}
# head(fdc_dat[1])
# head(fdc_dat[2])
# max(fdc_dat[1])
# max(fdc_dat[2])
png(fname, width = 700, height = 700)
fdc_plot <- hydroTSM::fdc(cbind(fdc_dat),
# yat = c(0.10,1,5,10,25,100,400),
# yat = c(round(min(fdc_dat),0),500,1000,5000,10000),
yat = c(300,500,1000,5000,10000),
leg.txt = legend_text,
main=paste("Flow Duration Curve","\n","(Model Flow Period ",sdate," to ",edate,")",sep=""),
ylab = "Flow (cfs)",
# ylim=c(1.0, 5000),
ylim=c(min(fdc_dat), max(fdc_dat)),
cex.main=1.75,
cex.axis=1.50,
leg.cex=2,
cex.sub = 1.2,
#pch = 20
pch = NA
)
dev.off()
print(paste("Saved file: ", fname, "with URL", furl))
###############################################
###############################################
# legend_text <- c("Pre-Giles (0 surface water demand)",
#                  "Post-Giles (1.05 mgd & 90% Flowby)")
legend_text <- c("Proposed Limits")
png(fname, width = 700, height = 700)
fdc_plot <- hydroTSM::fdc(cbind(fdc_dat),
# yat = c(0.10,1,5,10,25,100,400),
# yat = c(round(min(fdc_dat),0),500,1000,5000,10000),
yat = c(300,500,1000,5000,10000),
leg.txt = legend_text,
main=paste("Flow Duration Curve","\n","(Model Flow Period ",sdate," to ",edate,")",sep=""),
ylab = "Flow (cfs)",
# ylim=c(1.0, 5000),
ylim=c(min(fdc_dat), max(fdc_dat)),
cex.main=1.75,
cex.axis=1.50,
leg.cex=2,
cex.sub = 1.2,
#pch = 20
pch = NA
)
dev.off()
print(paste("Saved file: ", fname, "with URL", furl))
###############################################
###############################################
#----------------------------------------------
site <- "http://deq1.bse.vt.edu/d.dh"    #Specify the site of interest, either d.bet OR d.dh
#----------------------------------------------
# Load Libraries
basepath='/var/www/R';
source(paste(basepath,'config.R',sep='/'))
#----------------------------------------------
#site <- base_url    #Specify the site of interest, either d.bet OR d.dh, taken from the config.R
# this is now set in config.local.R
#----------------------------------------------
# source(paste(om_location,'R/summarize','rseg_elfgen.R',sep='/'))
library(stringr)
# dirs/URLs
save_directory <- "/var/www/html/data/proj3/out"
library(hydrotools)
# authenticate
ds <- RomDataSource$new(site, rest_uname)
ds$get_token(rest_pw)
# Read Args
# argst <- commandArgs(trailingOnly=T)
# pid <- as.integer(argst[1])
# elid <- as.integer(argst[2])
# runid <- as.integer(argst[3])
#-------------------------
# save_directory <- 'C:/Users/nrf46657/Desktop/GitHub/om/R/summarize'
save_directory <- 'C:/Users/nrf46657/Desktop/GitHub/vahydro/R/permitting/magnolia_green'
#-------------------------
# pid <- 4705859 # Swift Creek Reservoir
# elid <- 210815  # Swift Creek Reservoir
pid <- 5396059 # MAGNOLIA GREEN GOLF CLUB:Swift Creek
elid <- 351042 # MAGNOLIA GREEN GOLF CLUB:Swift Creek
# runid.list <- c(601)
runid.list <- c(600)
# legend_text <- c("Pre-Giles (0 surface water demand)",
#                  "Post-Giles (1.05 mgd & 90% Flowby)")
legend_text <- c("Proposed Limits")
# legend_text <- FALSE
dat_all <- list()
#i<-1
for (i in 1:length(runid.list)) {
runid <- runid.list[i]
# Note: when we migrate to om_get_rundata()
# we must insure that we do NOT use the auto-trim to water year
# as we want to have the model_run_start and _end for scenario storage
dat <- fn_get_runfile(elid, runid, site= omsite,  cached = FALSE)
mode(dat) <- 'numeric'
syear = as.integer(min(dat$year))
eyear = as.integer(max(dat$year))
# syear = 1984
# eyear = 2005
model_run_start <- min(dat$thisdate)
model_run_end <- max(dat$thisdate)
if (syear < (eyear - 2)) {
sdate <- as.Date(paste0(syear,"-10-01"))
edate <- as.Date(paste0(eyear,"-09-30"))
flow_year_type <- 'water'
} else {
sdate <- as.Date(paste0(syear,"-02-01"))
edate <- as.Date(paste0(eyear,"-12-31"))
flow_year_type <- 'calendar'
}
dat <- window(dat, start = sdate, end = edate);
mode(dat) <- 'numeric'
scen.propname<-paste0('runid_', runid)
cols <- names(dat)
# dat$Qbaseline <- dat$Qout +
#   (dat$wd_cumulative_mgd - dat$ps_cumulative_mgd ) * 1.547
#
# Qbaseline <- mean(as.numeric(dat$Qbaseline) )
# if (is.na(Qbaseline)) {
#   Qbaseline = Qout +
#     (wd_cumulative_mgd - ps_cumulative_mgd ) * 1.547
# }
datdf <- as.data.frame(dat)
# modat <- sqldf("select month, avg(wd_cumulative_mgd) as wd_mgd, avg(ps_cumulative_mgd) as ps_mgd from datdf group by month")
dat_all[[paste("datdf_",runid,sep='')]] <- datdf
} #end for loop
###############################################
# RSEG FDC
###############################################
# base_var <- "Qbaseline" #BASE VARIABLE USED IN FDCs AND HYDROGRAPHS
# comp_var <- "Qout" #VARIABLE TO COMPARE AGAINST BASE VARIABLE, DEFAULT Qout
base_var <- "Qintake"
comp_var <- "Qintake_post"
# build data frame of data needed for constructing the fdc curves
dat_base <- dat_all[[1]]
fdc_dat <- data.frame(dat_base[names(dat_base)== base_var])
#j <- 1
for (j in 1:length(dat_all)) {
datpd_j <- dat_all[[j]]
fdc_dat <- cbind(fdc_dat,datpd_j[names(datpd_j)== comp_var])
colnames(fdc_dat)[which(names(fdc_dat) == comp_var)] <- paste(runid.list[j],comp_var,sep="_")
} # end for loop
fname <- paste(
save_directory,
paste0(
'fdc.',
elid, '.',paste(runid.list, collapse = "."), '.png'
),
sep = '/'
)
# FOR TESTING
save_url <- save_directory
furl <- paste(
save_url,
paste0(
'fdc.',
elid, '.',paste(runid.list, collapse = "."), '.png'
),
sep = '/'
)
if (legend_text != FALSE){
legend_text = c("Baseline Flow",legend_text)
} else {
legend_text = c("Baseline Flow",runid.list)
}
# head(fdc_dat[1])
# head(fdc_dat[2])
# max(fdc_dat[1])
# max(fdc_dat[2])
png(fname, width = 700, height = 700)
fdc_plot <- hydroTSM::fdc(cbind(fdc_dat),
# yat = c(0.10,1,5,10,25,100,400),
# yat = c(round(min(fdc_dat),0),500,1000,5000,10000),
yat = c(300,500,1000,5000,10000),
leg.txt = legend_text,
main=paste("Flow Duration Curve","\n","(Model Flow Period ",sdate," to ",edate,")",sep=""),
ylab = "Flow (cfs)",
# ylim=c(1.0, 5000),
ylim=c(min(fdc_dat), max(fdc_dat)),
cex.main=1.75,
cex.axis=1.50,
leg.cex=2,
cex.sub = 1.2,
#pch = 20
pch = NA
)
dev.off()
print(paste("Saved file: ", fname, "with URL", furl))
###############################################
###############################################
rmarkdown::render('C:/Users/nrf46657/Desktop/GitHub/vahydro/R/examples/VWP_CIA_Summary.Rmd',
output_file ='C:/Users/nrf46657/Desktop/VWP Modeling/Magnolia Green/MagnoliaGreen_TE',
params = list(doc_title = "VWP CIA Summary - Magnolia Green Golf Club",
rseg.hydroid = 67942,
fac.hydroid = 90432,
runid.list = c("runid_600"),
rseg.metric.list = c("Qout","l30_Qout","l90_Qout","consumptive_use_frac","wd_cumulative_mgd","ps_cumulative_mgd","wd_mgd","ps_mgd"),
intake_stats_runid = 600,
preferred_runid = "runid_600",
downstream_rseg_ids=c(68096,68242),
users_metric = "base_demand_mgy",
cu_model = "facility",
cu_pre_var = "Qintake",
cu_post_var = "Qintake_post",
cu_decimals = 3
)
)
rmarkdown::render('C:/Users/nrf46657/Desktop/GitHub/vahydro/R/examples/VWP_CIA_Summary.Rmd',
output_file ='C:/Users/nrf46657/Desktop/VWP Modeling/Magnolia Green/MagnoliaGreen_TE',
params = list(doc_title = "VWP CIA Summary - Magnolia Green Golf Club",
rseg.hydroid = 67942,
fac.hydroid = 90432,
runid.list = c("runid_600"),
rseg.metric.list = c("Qout","l30_Qout","l90_Qout","consumptive_use_frac","wd_cumulative_mgd","ps_cumulative_mgd","wd_mgd","ps_mgd"),
intake_stats_runid = 600,
preferred_runid = "runid_600",
downstream_rseg_ids=c(68096,68242),
users_metric = "base_demand_mgy",
cu_model = "facility",
cu_pre_var = "Qintake",
cu_post_var = "Qintake_post",
cu_decimals = 3
)
)
rmarkdown::render('C:/Users/nrf46657/Desktop/GitHub/vahydro/R/examples/VWP_CIA_Summary.Rmd',
output_file ='C:/Users/nrf46657/Desktop/VWP Modeling/Magnolia Green/MagnoliaGreen_TE',
params = list(doc_title = "VWP CIA Summary - Magnolia Green Golf Club",
rseg.hydroid = 67942,
fac.hydroid = 90432,
runid.list = c("runid_600"),
rseg.metric.list = c("Qout","l30_Qout","l90_Qout","consumptive_use_frac","wd_cumulative_mgd","ps_cumulative_mgd","wd_mgd","ps_mgd"),
intake_stats_runid = 600,
preferred_runid = "runid_600",
downstream_rseg_ids=c(68096,68242),
users_metric = "base_demand_mgy",
cu_model = "facility",
cu_pre_var = "Qintake",
cu_post_var = "Qintake_post",
cu_decimals = 3
)
)
met_qa
library('hydrotools')
library('zoo')
basepath='/var/www/R';
source("/var/www/R/config.R")
################################################################################################
# LOAD MODEL IDs:
rseg_om_id <- 210815
fac_om_id <- 351042
# runid <- 601
runid <- 600
gageid = "02036500"
################################################################################################
facdat <- om_get_rundata(fac_om_id, runid, site = omsite)
rsegdat <- om_get_rundata(rseg_om_id, runid, site = omsite)
mstart <- zoo::as.Date(as.POSIXct(min(index(rsegdat)),origin="1970-01-01"))
mend <- zoo::as.Date(as.POSIXct(max(index(rsegdat)),origin="1970-01-01"))
facdat_df <- data.frame(facdat)
rsegdat_df <- data.frame(rsegdat)
met_qa <- data.frame(facdat_df$year,
facdat_df$month,
facdat_df$day,
facdat_df$Qintake,
facdat_df$Qintake_post)
View(met_qa)
round(min(fdc_dat)
,0)
