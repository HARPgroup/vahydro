#"runid_201","runid_401","runid_6014","runid_6011","runid_6013","runid_6015","runid_6012"
#https://cran.r-project.org/web/packages/officedown/officedown.pdf
#https://ardata-fr.github.io/officeverse/officedown-for-word.html#insert-sections
knitr::opts_chunk$set(echo = TRUE, fig.cap = TRUE)
library(officedown)
library(officer)
library(flextable)
library(hydrotools)
library(rjson)
basepath='/var/www/R'
source('/var/www/R/config.R')
ds <- RomDataSource$new("http://deq1.bse.vt.edu/d.dh", rest_uname)
ds$get_token(rest_pw)
source("https://raw.githubusercontent.com/HARPgroup/hydro-tools/master/R/om_cia_table.R") #Used during development
source("https://raw.githubusercontent.com/HARPgroup/hydro-tools/master/R/om_cu_table.R")
source("https://raw.githubusercontent.com/HARPgroup/hydro-tools/master/R/om_demand_table.R") #Used during development
source("https://raw.githubusercontent.com/HARPgroup/hydro-tools/master/VAHydro-2.0/fn_get_prop.R") #Used during development
source("https://raw.githubusercontent.com/HARPgroup/hydro-tools/master/VAHydro-2.0/rest_functions.R") #Used during development
source("https://raw.githubusercontent.com/HARPgroup/hydro-tools/master/VAHydro-2.0/find_name.R") #Used during development
source("https://raw.githubusercontent.com/HARPgroup/hydro-tools/master/R/fac_utils.R") #Used until fac_utils is packaged
# Could also use:
#source("https://raw.githubusercontent.com/HARPgroup/hydro-tools/master/VAHydro-2.0/run_text.R") #Used during development
fp <- fp_par(
text.align = "center",
padding.bottom = 20, padding.top = 120,
border.bottom = fp_border())
ft <- fp_text(shading.color='#EFEFEF', bold = TRUE)
library(utils)
site.plots <- omsite #image files use http
#SPECIFY MODELS AND RUNIDS OF INTEREST
rseg.hydroid <- params$rseg.hydroid
fac.hydroid <- params$fac.hydroid
runid.list <- params$runid.list
fac.metric.list <- params$fac.metric.list
fac_model_pid <- params$fac_model_pid
rseg.metric.list <- params$rseg.metric.list
intake_stats_fid <- params$intake_stats_fid
intake_stats_runid <- params$intake_stats_runid
intake_stats_varname <- params$intake_stats_varname
preferred_runid <- params$preferred_runid
impoundment_fid <- params$impoundment_fid
upstream_rseg_ids <- params$upstream_rseg_ids
downstream_rseg_ids <- params$downstream_rseg_ids
users_metric <- params$users_metric
cu_threshold = params$cu_threshold
cu_pre_var = params$cu_pre_var
cu_post_var = params$cu_post_var
cu_model = params$cu_model
cu_min_valid = params$cu_min_valid
cu_decimals = params$cu_decimals
elfgen = params$elfgen
if (is.logical(intake_stats_fid)) {
intake_stats_fid = fac.hydroid
}
#runid.list <- c('runid_400','runid_600')
#runid.list <- c('runid_201','runid_401')
rlist <- gsub('runid_', '', runid.list)
# SALEM WTP:
# rseg.hydroid <- 68327
# fac.hydroid <- 73112
# runid.list <- c('runid_11','runid_12','runid_13')
#
# fac.metric.list <- c('wd_mgd','ps_mgd','unmet30_mgd')
# rseg.metric.list <- c("Qout","Qbaseline","l30_Qout","l90_Qout","consumptive_use_frac","wd_cumulative_mgd","ps_cumulative_mgd")
#RSEG MODEL INFO
print(paste("searching", site,"for river segment id", rseg.hydroid))
#base_url = site, entity_id = rseg.hydroid
rseg.model <- RomProperty$new(
ds,
list(entity_type='dh_feature', featureid = rseg.hydroid, propcode="vahydro-1.0"),
TRUE
)
rseg_feature <- RomFeature$new(
ds,
list(hydroid = rseg.hydroid),
TRUE
)
#FAC MODEL INFO
if (!is.boolean(fac_model_pid)) {
# this is a feature with multiple models, so we need to specify
fac.model <- RomProperty$new(
ds,
list(pid = fac_model_pid),
TRUE
)
} else {
fac.model <- RomProperty$new(
ds,
list(entity_type='dh_feature', featureid = fac.hydroid, propcode="vahydro-1.0"),
TRUE
)
}
library(utils)
#FAC MODEL INFO
if (!is.boolean(fac_model_pid)) {
# this is a feature with multiple models, so we need to specify
fac.model <- RomProperty$new(
ds,
list(pid = fac_model_pid),
TRUE
)
} else {
fac.model <- RomProperty$new(
ds,
list(entity_type='dh_feature', featureid = fac.hydroid, propcode="vahydro-1.0"),
TRUE
)
}
library(rapportools)
#FAC MODEL INFO
if (!is.boolean(fac_model_pid)) {
# this is a feature with multiple models, so we need to specify
fac.model <- RomProperty$new(
ds,
list(pid = fac_model_pid),
TRUE
)
} else {
fac.model <- RomProperty$new(
ds,
list(entity_type='dh_feature', featureid = fac.hydroid, propcode="vahydro-1.0"),
TRUE
)
}
#FAC MODEL INFO
if (!is.boolean(fac_model_pid)) {
# this is a feature with multiple models, so we need to specify
fac.model <- RomProperty$new(
ds,
list(pid = fac_model_pid),
TRUE
)
} else {
fac.model <- RomProperty$new(
ds,
list(entity_type='dh_feature', featureid = fac.hydroid, propcode="vahydro-1.0"),
TRUE
)
}
fac_feature <- RomFeature$new(
ds,
list(hydroid = fac.hydroid),
TRUE
)
# need the intake hydroid for this, as there are no facility withdrawals
# only facility children, but we wouldn't want ALL facility children anyhow
annual_use_history <- fac_feature$tsvalues('wd_mgy')
fac_feature <- RomFeature$new(
ds,
list(hydroid = fac.hydroid),
TRUE
)
# need the intake hydroid for this, as there are no facility withdrawals
# only facility children, but we wouldn't want ALL facility children anyhow
annual_use_history <- fac_feature$tsvalues('wd_mgy')
fac.name <- fac_feature$name
if (exists("json_obj_url")) {
fac_obj_url <- paste(json_obj_url, fac.model$pid, sep="/")
fac_model_info <- ds$auth_read(fac_obj_url, "text/json", "")
fac_model_info <- fromJSON(fac_model_info)
fac.elid <- fac_model_info[[1]]$om_element_connection$value
rseg_obj_url <- paste(json_obj_url, rseg.model$pid, sep="/")
rseg_model_info <- ds$auth_read(rseg_obj_url, "text/json", "")
rseg_model_info <- fromJSON(rseg_model_info)
rseg.elid <- rseg_model_info[[1]]$om_element_connection$value
# get report customizations
fac_report_info = find_name(fac_model_info, "reports")
rseg_report_info = find_name(rseg_model_info, "reports")
if (!is.logical(impoundment_fid)) {
imp_model <- RomProperty$new(
ds,
list(entity_type='dh_feature', featureid = impoundment_fid, propcode="vahydro-1.0"),
TRUE
)
imp_obj_url <- paste(json_obj_url, imp_model$pid, sep="/")
imp_model_info <- om_auth_read(imp_obj_url, token,  "text/json", "")
imp_model_info <- fromJSON(imp_model_info)
}
} else {
message("Error: json_obj_url is undefined.  Can not retrieve model and scenario information. (Hint: Use config.R to set json_obj_url) ")
fac_model_info <- list()
rseg_model_info <- list()
}
rmarkdown::render('C:/Users/rnv55934/Documents/GitHub/vahydro/R/examples/VWP_CIA_Summary.Rmd',
output_file = 'C:/Users/rnv55934/Documents/Docs/Modeling/Output',
params = list(doc_title = "VWP CIA Summary - Giles County PSA",
rseg.hydroid = 68374,
fac.hydroid = 72813,
runid.list = c("runid_6001","runid_614"),
rseg.metric.list = c("Qout","l30_Qout","l90_Qout","consumptive_use_frac","wd_cumulative_mgd","ps_cumulative_mgd","wd_mgd","ps_mgd"),
intake_stats_runid = 11,
preferred_runid = "runid_614",
upstream_rseg_ids = c(67910,68155,68189,68122,68370,67932,68150,68145),
downstream_rseg_ids = c(68375,68194,67976,68156,67977),
users_metric = "base_demand_mgy")
)
