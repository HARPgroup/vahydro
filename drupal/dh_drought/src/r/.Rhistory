rm(list = ls())  #clear variables
#library(waterData) #https://cran.r-project.org/web/packages/waterData/waterData.pdf
library(dataRetrieval) #https://cran.r-project.org/web/packages/dataRetrieval/dataRetrieval.pdf
require(data.table)
require(zoo)
library(httr)
library(lubridate) #required for year()
#library(doBy) #required for summaryBy()
library(sqldf)
#SERVER:
source("/var/www/R/config.local.private");
#LOCAL:
print(paste("hydro_tools = ",hydro_tools,sep=""))
# load libraries
source(paste(hydro_tools,"VAHydro-2.0/rest_functions.R", sep = "/"));
source(paste(hydro_tools,"auth.private", sep = "/"));#load rest username and password, contained in auth.private file
token <- rest_token (base_url, token, rest_uname = rest_uname, rest_pw = rest_pw) #token needed for REST
site <- base_url
URL <- paste(site,"drought-wells-export", sep = "/");
well_list <- read.table(URL,header = TRUE, sep = ",")
hydrocodes <- well_list$hydrocode
hydrocodes
j <-1
siteNumber <- hydrocodes[j]
siteNumber <- toString(siteNumber)
print(paste("USGS siteNumber: ", siteNumber, sep=''));
siteNumber = unlist(strsplit(siteNumber, split='_', fixed=TRUE))[2]
welldata <- whatNWISdata(siteNumber = siteNumber)#, service = "all", parm_cd = "all",stat_cd = "all")
gwl_row <- which(welldata$parm_cd == 72019)
gwl_rows <- welldata[gwl_row,]
gwl_rows <- gwl_rows[ order(gwl_rows$begin_date , decreasing = TRUE ),]
begin_date_row <- gwl_rows[length(gwl_rows$begin_date),]
begin_date <- begin_date_row$begin_date
print(paste("Historic Record begining ",begin_date,sep=""))
url <- paste("https://waterdata.usgs.gov/nwis/dv?cb_72019=on&format=rdb_meas&site_no=",siteNumber,"&referred_module=sw&period=&begin_date=",begin_date,"&end_date=",sep="")
print(paste("Retrieving Data from NWIS using:",url))
data <- read.table(url,header = TRUE, sep = "\t")
print(head(data))
View(data)
data$max <- as.numeric(as.character(data[,5])) #COPY MAX (Depth to water level) COLUMN AND FORCE 'NA's WHERE THERE IS MISSING DATA
data$periodic <- as.numeric(as.character(data[,9])) #CREATE COLUMN OF PERIODIC MEASUREMENTS
latest_row <- length(data$max)
latest_row <- data[latest_row,]
latest_row
gw_lvl
gw_lvl <- latest_row$max
gw_lvl <- as.numeric(as.character(gw_lvl))
gw_lvl
if  (is.na(gw_lvl) == TRUE) {
latest_row <- length(data$max)
latest_row <- latest_row - 1
latest_row <- data[latest_row,]
gw_lvl <- latest_row$max
gw_lvl <- as.numeric(as.character(gw_lvl))
}
gw_lvl
print(gw_lvl)
months <- c('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec')
months_num <- c('-01-','-02-','-03-','-04-','-05-','-06-','-07-','-08-','-09-','-10-','-11-','-12-')
months_all <- data.frame(months,months_num)
month_row <- which(months_all$months == format(Sys.time(),"%b"))
month_num <- months_all[month_row,]
month <- month_num$months
month <- toString(month)
month_num <- month_num$months_num
data [ grep( month_num , data$datetime, perl= TRUE ), "month" ] <- month
month_rows <- which(data$month == month)
month_data <- data[month_rows,] #ISOLATE CURRENT MONTH'S DATA
continuous_data <- month_data[!(is.na(month_data$max) | month_data$max==""), ]
continuous_data$gwl_value <- continuous_data$max
periodic_data <- month_data[!(is.na(month_data$periodic) | month_data$periodic==""), ]
periodic_data$gwl_value <- periodic_data$periodic
month_data_all <- rbind(periodic_data,continuous_data)
View(month_data_all)
month_data_all$year <- year(month_data_all[,"datetime"])
#
#=== SQL Version ==================================================
month_data_medians <- paste("SELECT year,
median(gwl_value) AS 'gwl_value.median'
FROM month_data_all
GROUP BY year
",sep="")
month_data_medians <- sqldf(month_data_medians)
View(month_data_medians)
month_data_medians <- month_data_medians[-length(month_data_medians[,1]),]
gwl_medians <- as.numeric(as.character(month_data_medians$gwl_value.median))
gwl_medians
quant_num <- c(1, 2, 3, 4, 5, 6, 7, 8, 9)
quant <- c(0, 0.05, 0.10, 0.25, 0.5, 0.75, 0.90, 0.95, 1)
month_quant <- quantile(gwl_medians, probs =  quant)
month_quant <- round(month_quant,2)
print(month_quant)
print(gw_lvl)
gw_lvl_round <- round(as.numeric(as.character(gw_lvl)), digits=7)
if ((gw_lvl_round < round(as.numeric(as.character(month_quant[9])), digits=7)) == 'FALSE') {   #IF RECORD HIGH groundwater level
rolling_percentile <- 100
} else if ((gw_lvl_round > round(as.numeric(as.character(month_quant[1])), digits=7)) == 'FALSE') {   #IF RECORD LOW groundwater level
rolling_percentile <- 0
} else {  #BETWEEN HISTORIC LOW AND HISTORIC HIGH
for (i in 1:length(quant_num)) {
lower_quantile <- quant_num[i]
upper_quantile <- quant_num[i]+1
lower_percent <- quant[i]
upper_percent <- quant[i+1]
if ((gw_lvl >= month_quant[lower_quantile] && gw_lvl <= month_quant[upper_quantile] ) == 'TRUE') {
rolling_percentile <- lower_percent + (gw_lvl- month_quant[lower_quantile])*(( upper_percent - lower_percent)/(month_quant[upper_quantile]-month_quant[lower_quantile]))
rolling_percentile <- as.vector(rolling_percentile)
rolling_percentile <- rolling_percentile*100
}
}
}
rolling_percentile <- (100 - rolling_percentile)
rolling_percentile
print(paste("The gw_lvl for today is ",gw_lvl,sep=""))
print(paste("This is equivalent to a percentile of ",rolling_percentile," for the month of ",month," at GAGE ",siteNumber,sep=""))
#     q_7day_cfs (TIMESERIES ON GAGE FEATURE THAT IS CREATED EACH DAY THE SCRIPT IS RUN)
#     nonex_pct (PROPERTY ON TIMESERIES ABOVE THAT IS CREATED EACH DAY THE SCRIPT IS RUN)
#
#----------------------------------------------------------------------------------------------------------
rm(list = ls())  #clear variables
#library(waterData)
library(dataRetrieval)
require(data.table)
require(zoo)
library(httr)
library(stringr)
#SERVER:
source("/var/www/R/config.local.private");
#LOCAL:
source(paste(hydro_tools,"VAHydro-2.0/rest_functions.R", sep = "/"));
source(paste(hydro_tools,"auth.private", sep = "/"));#load rest username and password, contained in auth.private file
token <- rest_token (base_url, token, rest_uname = rest_uname, rest_pw = rest_pw) #token needed for REST
site <- base_url
URL <- paste(site,"drought-gages-export", sep = "/");
gagelist <- read.table(URL,header = TRUE, sep = ",")
hydrocode <- gagelist$hydrocode
USGS_GAGES <- str_split_fixed(gagelist$hydrocode, "usgs_", 2)
gagelist$USGS_GAGES <- USGS_GAGES[,2]
USGS_GAGES <- gagelist$USGS_GAGES
j<-1
USGS_GAGE_ID <- USGS_GAGES[j]
print(paste("USGS_GAGE_ID ", USGS_GAGE_ID, sep=''));
gage_info <- readNWISsite(USGS_GAGE_ID)
staid <- gage_info$site_no
staname <- gage_info$station_nm
gage <- readNWISdv(USGS_GAGE_ID,'00060')
gage <- renameNWISColumns(gage)
rollmean_7day <- rollmeanr(gage$Flow,7,fill=NA)
gage <- cbind(gage, rollmean_7day )
View(gage)
