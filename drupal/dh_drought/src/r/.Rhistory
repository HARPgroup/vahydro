#THIS SCRIPT CALCULATES THE CURRENT 7-DAY RUNNING AVERAGE "Depth to water level, feet below land surface (Maximum) level" FOR ALL USGS DROUGHT GAGES
#THE CORRESPONDING PERCENTILE IS THEN CALCULATED USING THE HISTORIC "DAILY" "Depth to water level" VALUES FOR THE CURRENT MONTH
#   STORED VIA REST:
#     drought_status_stream (PROPERTY ON GAGE FEATURE THAT IS UPDATED EACH DAY THE SCRIPT IS RUN)
#     q_7day_cfs (TIMESERIES ON GAGE FEATURE THAT IS CREATED EACH DAY THE SCRIPT IS RUN)
#     nonex_pct (PROPERTY ON TIMESERIES ABOVE THAT IS CREATED EACH DAY THE SCRIPT IS RUN)
#
#----------------------------------------------------------------------------------------------------------
rm(list = ls())  #clear variables
#library(waterData)
library(dataRetrieval)
require(data.table)
require(zoo)
library(httr)
library(stringr)
library(sqldf)
push_to_rest <- TRUE
basepath <- "/var/www/R/"
source(paste(basepath,"config.local.private",sep = '/'))
# load libraries
source(paste(hydro_tools,"VAHydro-2.0/rest_functions.R", sep = "/"));
source(paste(basepath,"auth.private",sep = '/'))
token <- rest_token (base_url, token, rest_uname = rest_uname, rest_pw = rest_pw) #token needed for REST
site <- base_url
#THIS SCRIPT CALCULATES THE CURRENT 7-DAY RUNNING AVERAGE "Depth to water level, feet below land surface (Maximum) level" FOR ALL USGS DROUGHT GAGES
#THE CORRESPONDING PERCENTILE IS THEN CALCULATED USING THE HISTORIC "DAILY" "Depth to water level" VALUES FOR THE CURRENT MONTH
#   STORED VIA REST:
#     drought_status_stream (PROPERTY ON GAGE FEATURE THAT IS UPDATED EACH DAY THE SCRIPT IS RUN)
#     q_7day_cfs (TIMESERIES ON GAGE FEATURE THAT IS CREATED EACH DAY THE SCRIPT IS RUN)
#     nonex_pct (PROPERTY ON TIMESERIES ABOVE THAT IS CREATED EACH DAY THE SCRIPT IS RUN)
#
#----------------------------------------------------------------------------------------------------------
rm(list = ls())  #clear variables
#library(waterData)
library(dataRetrieval)
require(data.table)
require(zoo)
library(httr)
library(stringr)
library(sqldf)
push_to_rest <- FALSE
basepath <- "/var/www/R/"
#source(paste(basepath,"config.local.private",sep = '/'))
source('/var/www/R/config.R')
site
base_url
URL <- paste(site,"drought-gages-export-all", sep = "/");
#gagelist <- read.table(URL,header = TRUE, sep = ",")
gagelist <- read.csv(URL, sep = ",")
View(gagelist)
#########
#This can be removed later, view pulling in bad line
gage_sql <- paste("SELECT * FROM gagelist WHERE Bundle = 'USGSGage'",sep="")
gagelist <- sqldf(gage_sql)
#########
hydrocode <- gagelist$hydrocode
USGS_GAGES <- str_split_fixed(gagelist$hydrocode, "usgs_", 2)
gagelist$USGS_GAGES <- USGS_GAGES[,2]
USGS_GAGES <- gagelist$USGS_GAGES
USGS_GAGES
j<-1
USGS_GAGE_ID <- USGS_GAGES[j]
print(paste("USGS_GAGE_ID ", USGS_GAGE_ID, sep=''))
gage_info <- readNWISsite(USGS_GAGE_ID)
staid <- gage_info$site_no
staname <- gage_info$station_nm
gage <- readNWISdv(USGS_GAGE_ID,'00060')
gage <- renameNWISColumns(gage)
rollmean_7day <- rollmeanr(gage$Flow,7,fill=NA)
gage <- cbind(gage, rollmean_7day)
##################################################################
# COMPUTE 7-day ROLLING AVG USING SQL
gage <-sqldf(paste('SELECT *, AVG(Flow)
OVER (ORDER BY Date ASC
ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS sql_rolling_avg
FROM gage',sep=""))
##################################################################
#--Current ROLLING 7-DAY AVERAGE for USGS Streamgage
latest_row <- gage[length(gage$Date),]
rolling_7day_avg <- latest_row$sql_rolling_avg
#Skip gage if rolling_7day_avg NA due to equipment malfunction or other issue
if (is.na(rolling_7day_avg)){next} #SHOULD NEVER ACTUALLY HAVE NA AS LONG AS ANY OF THE PAST 7 DAYS HAVE DATA
#Create dataframe of all month's names and numeric values
months <- c('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec')
months_num <- c('-01-','-02-','-03-','-04-','-05-','-06-','-07-','-08-','-09-','-10-','-11-','-12-')
months_all <- data.frame(months,months_num)
#Determine Current month name and numeric value
#month_row <- which(months_all$months == format(Sys.time(),"%b")) #MONTH OF CURRENT DAY
month_row <- which(months_all$months == format(Sys.time()-86400,"%b")) #MONTH OF YESTERDAY
month_num <- months_all[month_row,]
month <- month_num$months
month <- toString(month)
month_num <- month_num$months_num
#Determine The percentiles for this month based on historic 7-Day Average Streamflows
gage [ grep( month_num , gage $Date, perl= TRUE ), "month" ] <- month
month_rows <- which(gage$month == month)
month_data <- gage[month_rows,]
month_data <- na.omit(month_data) #in case the first month of historic record is same as current month
#month_flows <- month_data$val
month_flows_7day <- month_data$rollmean_7day
quant_num <- c(1, 2, 3, 4, 5, 6, 7, 8, 9)
quant <- c(0, 0.05, 0.10, 0.25, 0.5, 0.75, 0.90, 0.95, 1)
month_quant <- quantile(month_flows_7day, probs =  quant)
if ((rolling_7day_avg < as.numeric(as.character(month_quant[9]))) == 'FALSE') {   #IF RECORD LOW
rolling_percentile <- 100
} else if ((rolling_7day_avg > as.numeric(as.character(month_quant[1]))) == 'FALSE') {   #IF RECORD HIGH
rolling_percentile <- 0
} else if ((rolling_7day_avg < as.numeric(as.character(month_quant[1])) && rolling_7day_avg > as.numeric(as.character(month_quant[9]))) == 'FALSE') {  #BETWEEN HISTORIC LOW AND HISTORIC HIGH
for (i in 1:length(quant_num)) {
lower_quantile <- quant_num[i]
upper_quantile <- quant_num[i]+1
lower_percent <- quant[i]
upper_percent <- quant[i+1]
if ((rolling_7day_avg >= month_quant[lower_quantile] && rolling_7day_avg <= month_quant[upper_quantile] ) == 'TRUE') {
rolling_percentile <- lower_percent + (rolling_7day_avg- month_quant[lower_quantile])*(( upper_percent - lower_percent)/(month_quant[upper_quantile]-month_quant[lower_quantile]))
rolling_percentile <- as.vector(rolling_percentile)
rolling_percentile <- rolling_percentile*100
}
}
}
print(paste("The Rolling 7-day Avg for today is ",rolling_7day_avg,sep=""))
print(paste("This is equivalent to a percentile of ",rolling_percentile," for the month of ",month," at GAGE ",USGS_GAGE_ID,sep=""))
#Determine the drought status based on percentile thresholds
if ((rolling_percentile  > 25) == 'TRUE') {nonex_propcode <- 0}
if ((rolling_percentile  >= 10 && rolling_percentile <= 25) == 'TRUE') {nonex_propcode <- 1}
if ((rolling_percentile >= 5 && rolling_percentile  < 10) == 'TRUE') {nonex_propcode <- 2}
if ((rolling_percentile  < 5) == 'TRUE') {nonex_propcode <- 3}
print(paste("The Drought Status Propcode for ",USGS_GAGE_ID," is ",nonex_propcode,sep=""))
nonex_propcode
